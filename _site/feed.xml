<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>极客玩家Bravo Yeung-大白技术控</title>
    <description>极客玩家Bravo Yeung的技术分享博客。内容涵盖.NET, PHP, Leetcode面试题，Python等等~</description>
    <link>http://localhost:4000/</link>
    <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 25 Jul 2020 13:03:34 +0800</pubDate>
    <lastBuildDate>Sat, 25 Jul 2020 13:03:34 +0800</lastBuildDate>
    <generator>Jekyll v3.8.7</generator>
    
      <item>
        <title>永远的窗口(个人对窗口的拙见)</title>
        <description>&lt;p&gt;来源: &lt;a href=&quot;https://www.cnblogs.com/helloj2ee/archive/2009/06/29/1513210.html&quot;&gt;永远的窗口（个人对窗口的拙见） - by helloj2ee&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;文章愿意和大家分享，但是转载请注明出处！&lt;/p&gt;

&lt;p&gt;如果windows一直存在下去，窗口这个话题也许是永恒的……&lt;/p&gt;

&lt;h2 id=&quot;一切皆窗口&quot;&gt;一切皆窗口&lt;/h2&gt;

&lt;p&gt;在我看来桌面上的一切都是窗口，桌面本身是窗口，开始菜单是窗口，桌面上永远置顶的播放器是个置顶的窗口，工具栏是个子窗口…….&lt;/p&gt;

&lt;p&gt;不仅我这么看，Spy++也这么看，如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/public/forever-window-p1.jpg&quot; alt=&quot;img1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;图 1‑1 Spy++和桌面&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;一切都是窗口，窗口错落有致，成为界面树上的翩翩叶子，组织成了我们所看到的整个Windows系统用户界面。&lt;/p&gt;

&lt;p&gt;我们首先通过一个普普通通典型的窗口，来分析一下窗口的组成：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/public/forever-window-p2.jpg&quot; alt=&quot;img2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;图 1‑2 普普通通的窗口&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;         一个窗口是有很多界面元素的，比如标题栏，菜单栏，状态栏等等。但实际上可以把这些归为两类，一类是客户区，客户区就是整个窗口中间的部分，在图中已经标示出来。客户区是由程序员负责绘制的，程序员可以在上面写个字或者画个圆这样。而另一类当然是非客户区，除了图上客户区以外的地方，标题栏，水平滚动条等等都是非客户区，这一部分的绘制是由操作系统负责的。&lt;/p&gt;

&lt;p&gt;         界面元素是看的见的，还有一些窗口特性我们用上图是无法表示出来的，比如窗口该如何响应用户的输入？比如窗口的鼠标应该是什么样的，是单箭头或者是其他比较炫的鼠标效果？比如客户区的背景色应该是什么样的等等。&lt;/p&gt;

&lt;p&gt;归纳起来就是两点：&lt;/p&gt;

&lt;p&gt;（1）      窗口的界面元素分成两类，一类是客户区，另一类是非客户区；&lt;/p&gt;

&lt;p&gt;（2）      窗口的特性，看得见的，看不见的，七大姑八大姨的，确实很多。&lt;/p&gt;

&lt;p&gt;一个成功的窗口需要程序员和操作系统默契配合。操作系统作一些通用的，基础的工作，比如绘制一个标题栏，状态栏这样的事情。程序员作一些特定的工作，比如读一个数据文件，然后用图形化的方式显示在窗口客户区内。&lt;/p&gt;

&lt;h2 id=&quot;2-窗口的创建&quot;&gt;2. 窗口的创建&lt;/h2&gt;

&lt;p&gt;前面我说了，窗口的特性是很多的。不是一般的多，而是七大姑八大姨般的多。因此窗口的创建，一般的方法，那就麻烦了。程序员需要一个一个指定这些特性，看得见得要指定，看不见的还要指定。不仅如此，每打算创建一个窗口，你就要指定一次，无论这些窗口有多么类似，你还是要不厌其烦地指定下去。&lt;/p&gt;

&lt;p&gt;有些人怕麻烦，他指定了三五个特性，最终宣布”这真不是人干的活，老子金盆洗手了……“,这些人，我们只有哎……&lt;/p&gt;

&lt;p&gt;有些人不怕麻烦，他会老老实实一遍一遍指定下去，这些人，我们尊敬他们…….&lt;/p&gt;

&lt;p&gt;         还有些人怕麻烦，于是他们想出了新的办法，这些人，我们只有崇拜…….&lt;/p&gt;

&lt;p&gt;技术精英们想出的办法是”把共性的东西，抽象出来”。这句话我在下面会慢慢解释。&lt;/p&gt;

&lt;h3 id=&quot;21-把共性的东西抽象出来&quot;&gt;2.1 把共性的东西，抽象出来&lt;/h3&gt;

&lt;p&gt;在Windows操作系统里，我们是用窗口句柄（HWND）来操作一个窗口的。HWND就相当于每个窗口的钥匙。Windows里CreateWindow或者CreateWindowEx都是创建一个窗口的函数，它们返回 HWND类型的一个值，以便程序员继续对窗口进行操作。这个值对应的是桌面上一个一个实实在在的窗口，我们看到这些窗口有很多特性是类似的，比如窗口客户区的背景色都是白色的，鼠标的光标形状都是一样的等等。于是技术精英们就把这些共性的东西抽象出来了，抽象成了一个结构，这个结构我们称之为窗口类（windows class）。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nc&quot;&gt;UINT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;WNDPROC&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lpfnWndProc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cbClsExtra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cbWndExtra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HINSTANCE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HICON&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hIcon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HCURSOR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hCursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;HBRUSH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hbrBackground&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LPCTSTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lpszMenuName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;LPCTSTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lpszClassName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WNDCLASS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PWNDCLASS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;代码 2‑1 窗口类结构体&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这里面最为重要的是第二个成员窗口过程，如果把窗口比作有生命的物体，那么窗口过程就注入了灵魂。这个我们需要在消息循环一节当中解释。&lt;/p&gt;

&lt;p&gt;其他的比较常用的成员变量，比如&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hIcon&lt;/code&gt;指定了应用程序的图标，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hCursor&lt;/code&gt;指定了鼠标的形状，hbrBackground指定了客户区的背景色，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lpszMenuName&lt;/code&gt;指定了窗口类的菜单，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lpszClassName&lt;/code&gt;指定了窗口类的名字等等。这些特性是每个窗口都具备的共性，因此全部抽象成了窗口类的成员变量。&lt;/p&gt;

&lt;p&gt;窗口类和窗口的关系，在面向对象里我们可以把它们比作类和对象的关系。但是更贴切的比喻，我认为是模具和成品的关系。窗口类好比一个个模具，想要做按钮，我们就拿一个按钮的模具，倒成一个模子，然后再在上面做一些慢工细活，成为一个按钮。想做组合框，我们就拿一个组合框的模具，想做编辑框，我们就拿一个编辑框的模具，想做一个花瓶，我们就拿……. 问题来了，操作系统没有提供花瓶的模具，不过也有办法，操作系统会告诉我们，你把模具的特性告诉我，我会给你制作一个花瓶的模具。&lt;/p&gt;

&lt;p&gt;有&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Win32&lt;/code&gt;经验的程序员都知道，每次创建窗口之前，我们都会调用一个函数&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;RegisterClass&lt;/code&gt;，注册窗口类。注册窗口类实际上就是告诉操作系统模具的特性和要求，让操作系统为我们制作一个模具。&lt;/p&gt;

&lt;p&gt;因此一个标准的窗口创建过程，如下所示： &lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;LRESULT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CALLBACK&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WndProc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HWND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hwnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UINT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WPARAM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LPARAM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;APIENTRY&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WinMain&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HINSTANCE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;HINSTANCE&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hPrevInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;LPSTR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lpCmdLine&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
	&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nCmdShow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TCHAR&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;szAppName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;HelloWin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;HWND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hwnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;WNDCLASS&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wndclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// 注册窗口&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;wndclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CS_HREDRAW&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CS_VREDRAW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;wndclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lpfnWndProc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WndProc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;wndclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbClsExtra&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;wndclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cbWndExtra&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;wndclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hInstance&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;wndclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hIcon&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoadIcon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDI_APPLICATION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;wndclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hCursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LoadCursor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDC_ARROW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;wndclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hbrBackground&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HBRUSH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetStockObject&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WHITE_BRUSH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;wndclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lpszMenuName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;wndclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lpszClassName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;szAppName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RegisterClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;wndclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;c1&quot;&gt;// 创建窗口并显示窗口&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;hwnd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CreateWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;szAppName&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TEXT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The Hello Program&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;WS_OVERLAPPEDWINDOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;CW_USEDEFAULT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;CW_USEDEFAULT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;CW_USEDEFAULT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;CW_USEDEFAULT&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
		&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hInstance&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;ShowWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hwnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nCmdShow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;UpdateWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hwnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;c1&quot;&gt;// …….&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;LRESULT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CALLBACK&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;WndProc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;HWND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hwnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UINT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WPARAM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;LPARAM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DefWindowProc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hwnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt; &lt;strong&gt;代码 2‑2 标准的窗口创建过程&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;但是这个还远没有结束。按照毛主席老人家的话，这是”万里长征第一步”。如果运行一下这个程序，窗口犹如昙花一现，一闪而过。这其中的原因，我们还是要留在后面介绍。操作系统之所以能够找到指定的模具来制作窗口，主要是靠窗口类的类名（lpszClassName）。我们可以看到CreateWindow的第一个参数便是窗口类的类名，操作系统根据这个类名去寻找相应的系统窗口类或者是应用程序注册的窗口类。&lt;/p&gt;

&lt;h3 id=&quot;22-唏嘘感慨几句&quot;&gt;2.2 唏嘘感慨几句&lt;/h3&gt;

&lt;p&gt;说到这里，真的是要唏嘘感慨几句。相信绝大多数程序员都有这个认识，就是C语言是过程语言，而C++是面向对象的语言。但是Win32掷地有声地告诉我们，语言只是载体，用C语言同样可以写出面向对象思想的程序。窗口类和窗口即是明证。&lt;/p&gt;

&lt;p&gt;此外，如果你是从Win32，MFC, WinForm到现在最为流行的WPF一路走来，同样也会感到微软的技术进步带给程序员的便利。我自认为对Win32还算是熟悉，但是让我创建一个窗口的时候，我往往也是要从MSDN里找出一段代码Copy上去，或者是直接利用向导创建一个HelloWorld。在MFC里，事情并没有得到好转，虽然我们可以利用向导直接得到一个单文档，多文档或者是基于对话框的应用程序，但是我们连应用程序的入口（WinMain）都找不到了。相信每个MFC程序员，在早期的MFC学习当中都是痛苦不堪的。在WinForm中创建窗口，真正的变的简单。多简单？一句话。只需要一句话，一个窗口就创建出来了。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;Application&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HelloWorldWinForm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;代码 2‑3 WinForm里创建窗口&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;按理说，WinForm已经简单到了极致。WPF没有理由再简单，但他还是做到了。因为在WPF里甚至不需要写任何程序，只需要在指定应用程序启动的时候启动那个窗口文件即可。&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Application&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x:Class =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;HelloWorldWPF.App&quot;&lt;/span&gt; 
	&lt;span class=&quot;na&quot;&gt;xmlns =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;xmlns:x =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&lt;/span&gt;
	&lt;span class=&quot;na&quot;&gt;StartupUri =&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;HelloWorldWPF.xaml&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;代码 2‑4 WPF里创建窗口&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;所以真的是不从历史这样一步一步走到当代，就看不出进步。这几个例子的源码我都写好了，放在附件文件夹下，各位的机器有VC6.0和VS2008的环境的话即可运行。&lt;/p&gt;

&lt;h2 id=&quot;3-窗口的类型&quot;&gt;3. 窗口的类型&lt;/h2&gt;

&lt;p&gt;注册完窗口类，紧接着就是创建窗口，过去在创建窗口的时候，我很拿不准的就是指定样式（CreateWindow的第三个参数）。因为窗口的样式确实太多，我简单统计了一下窗口样式有18种，也许有人觉得不算多，但是这18种还是可以任意组合的。这样就真是无穷无尽了。但是好好的归纳和总结，事情是可以变的简单的。真正的窗口类型只有5种，而真正常用的只有3种。下面，我需要分别介绍一下这5种窗口类型，实际上搞清楚前3种，大体也就OK了。&lt;/p&gt;

&lt;h3 id=&quot;31重叠式窗口overlapped-windows&quot;&gt;3.1    重叠式窗口（Overlapped Windows）&lt;/h3&gt;

&lt;p&gt;一个重叠式窗口往往是应用程序的主窗口，它有标题栏，边框，客户区，图标，最小化，最大化按钮等等。创建窗口的时候，如果你指定WS_OVERLAPPED或者WS_OVERLAPPEDWINDOW 这样的样式，就可以创建一个重叠式窗口。&lt;/p&gt;

&lt;p&gt;相信一定会有人问，WS_OVERLAPPED 和WS_OVERLAPPEDWINDOW 有什么区别？我们只要看看两个宏的定义，便可见分晓（窗口样式的宏都定义在WinUser.h这个文件当中）。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// 摘自WinUser.h文件&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#define WS_OVERLAPPED       0x00000000L
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define WS_POPUP            0x80000000L
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define WS_CHILD             0x40000000L
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define WS_MINIMIZE          0x20000000L
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define WS_VISIBLE            0x10000000L
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define WS_DISABLED          0x08000000L
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define WS_CLIPSIBLINGS       0x04000000L
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define WS_CLIPCHILDREN      0x02000000L
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define WS_MAXIMIZE         0x01000000L
&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;......&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#define WS_OVERLAPPEDWINDOW (WS_OVERLAPPED     | &quot;
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;WS_CAPTION&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;    WS_SYSMENU | &quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;WS_THICKFRAME&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;    WS_MINIMIZEBOX | &quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;WS_MAXIMIZEBOX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;代码 3‑1 窗口样式&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;从定义上也能看出&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WS_OVERLAPPEDWINDOW&lt;/code&gt;是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WS_OVERLAPPED&lt;/code&gt;和其他样式的一种组合。&lt;/p&gt;

&lt;p&gt;写到这里，我们不得不岔开一下话题，谈一谈关于程序员”小气和高明”的问题。&lt;/p&gt;

&lt;h3 id=&quot;小气和高明的程序员&quot;&gt;小气和高明的程序员&lt;/h3&gt;

&lt;p&gt;细心的读者可能已经注意到了，窗口样式的宏定义并不是按照我们常规的方式来定义，比如WS_OVERLAPPED用1来表示，WS_POPUP用2来表示，以此类推……实际上宏定义全部采用的是16进制的表示方法，而且在表示也是有讲究的，基本上用的是1(2^0^)，2(2^1^)，4(2^2^)，8(2^3^)这样的数值表示。实际上不仅仅是窗口样式，绝大部分类似窗口样式这种可以组合表示的宏都采用的这种手法。也许还是有相当的新手，不知道这样表示的妙用，我们把他们全部用二进制的表示方法，秘密昭然若揭。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;表格 3‑1 窗口样式的二进制和十六进制表示&lt;/strong&gt;&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;样式&lt;/th&gt;
      &lt;th&gt;数值表示（32位整型数字,2进制表示）&lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt; &lt;/th&gt;
      &lt;th&gt;数值（16进制）&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;WS_OVERLAPPED&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;……&lt;/td&gt;
      &lt;td&gt;0x00000000L&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;WS_POPUP&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;……&lt;/td&gt;
      &lt;td&gt;0x80000000L&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;WS_CHILD&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;……&lt;/td&gt;
      &lt;td&gt;0x40000000L&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;WS_MINIMIZE&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;……&lt;/td&gt;
      &lt;td&gt;0x20000000L&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;WS_VISIBLE&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;……&lt;/td&gt;
      &lt;td&gt;0x10000000L&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;……&lt;/td&gt;
      &lt;td&gt;……&lt;/td&gt;
      &lt;td&gt;……&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;WS_POPUP | WS_CHILD&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;……&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/public/window_macros_table.png&quot; alt=&quot;window macros table&quot; /&gt;&lt;/p&gt;

&lt;p&gt;察觉出来没有，程序员没有用一个整型（32位）来表示一个特定的窗口样式，而是用1位来表示窗口样式。小气吗？真小气，早期的程序员就像守财奴一样非常吝啬地使用自己的内存。一个32位的整型，程序员用其中1位来表示一个特定的样式。如果其中有几位都是1呢？那么它表示的就是一个样式的组合。因此，我们可以看到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WS_OVERLAPPEDWINDOW&lt;/code&gt; 可以由几个窗口样式进行或运算组合而成。&lt;/p&gt;

&lt;p&gt;这样的做法也是一个极其高明的做法。需要组合的这种参数，往往会设计成这样。它们通过或运算组合而成。判断该参数里是否有某一个特定的样式，则用与运算来检验。将样式从某一个组合里剔除出来，则采用与非运算。如下所示：&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WS_POPUP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;         &lt;span class=&quot;c1&quot;&gt;// 数值为0x80000000&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WS_MINIMIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//样式组合成了 WS_POPUP | WS_MINIMIZE    数值为0x80000000 | 0x20000000为0xa0000000&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WS_MINIMIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 判断style里是否有WS_MINIMIZE 返回为真&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WS_CHILD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;          &lt;span class=&quot;c1&quot;&gt;//判断style里是否有WS_CHILD返回为假    &lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;style&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WS_MINIMIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;//从样式里去掉了WS_MINIMIZE样式         数值为0x80000000&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;代码 3‑2 窗口样式运算&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;32弹出式窗口popup-window&quot;&gt;3.2    弹出式窗口（Popup Window）&lt;/h2&gt;

&lt;p&gt;最典型的弹出式窗口是对话框。弹出式窗口和重叠式窗口还是相当类似的。弹出式窗口和重叠式窗口到底有什么区别呢？&lt;/p&gt;

&lt;p&gt;一般来说一个应用程序的主窗口是重叠式窗口，而弹出式窗口多用于对话框，消息框这样的窗口。当然还有细节上的问题。&lt;/p&gt;

&lt;p&gt;（1） WS_OVERLAPPED样式创建的窗口是含有标题栏的，而WS_POPUP样式创建的窗口是不含标题栏的，如果需要创建一个带标题栏的WS_POPUP样式的窗口，那么需要运用WS_POPUP | WS_CAPTION样式组合；&lt;/p&gt;

&lt;p&gt;（2） 在创建WS_OVERLAPPED样式窗口的时候，CreateWindow或者CreateWindowEx函数当中x,y,nWidth, nHeight四个参数都可以取CW_USEDEFAULT默认值，系统会选择一个合适的值。但是创建WS_POPUP样式的窗口，CW_USEDEFAULT对这四个参数是无效的，如果程序员一意孤行非要传CW_USEDEFAULT值，系统会默认认为这几个参数为0，那么这个时候整个窗口的大小就为0。这个时候往往会给程序员造成一种错觉，以为自己的窗口没有创建出来，实际上窗口已经创建出来了，只不过它长宽均为0而已。&lt;/p&gt;

&lt;h2 id=&quot;33-子窗口child-window&quot;&gt;3.3 子窗口（Child Window）&lt;/h2&gt;

&lt;p&gt;类似于按钮这样的窗口，我们称之为子窗口。子窗口的样式为WS_CHILD,子窗口必须得有一个父窗口。而且子窗口的区域一定限制在父窗口的客户区内。一般一个子窗口默认只有客户区，除非程序员再去显示地为子窗口指定标题栏（WS_CAPTION）或者边框（WS_BORDER）之类的样式。&lt;/p&gt;

&lt;p&gt;自此，应该说窗口的类型算是基本上介绍完了。无论桌面上的窗口怎么变，有80%都是在这三种之间变来变去，把弹出窗口加一个标题栏，或者把重叠窗口加上最大最小化按钮啊等等。但确实还有一小撮不属于这三种类型的，但是下面的两种都是属于比较特殊的情况，为了满足各位的好奇心，我们还是把窗口的类型介绍完整。&lt;/p&gt;

&lt;h3 id=&quot;34-分层窗口layered-window&quot;&gt;3.4 分层窗口（Layered Window）&lt;/h3&gt;

&lt;p&gt;分层窗口，这样的翻译不知道是否准确。因为这一部分，大家讨论得还是比较少，因此没有什么统一认可的翻译方式。分层窗口是在Windows2000之后才出现的。如果大家比较感兴趣可以参考我的另一篇文章《分层窗口——Windows进化的中间产物》。&lt;/p&gt;

&lt;p&gt;如果各位体验过Windows2000以前的产品，Windows95或者Windows98。细心的用户会发现Windows为了改进用户体验，在部分细节的地方作了改变，比如鼠标。在Windows2000以前，鼠标只是一个平面的箭头。而在Windows2000和Windows2000以后，鼠标下面会增加了一层阴影，以强化其视觉深度。这样使得鼠标更有立体感，在大的显示器甚至是多个显示器上更容易找到那个小小的鼠标。 &lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/public/forever-window-p3.jpg&quot; alt=&quot;img3&quot; /&gt;&lt;/p&gt;

&lt;p&gt; &lt;strong&gt;图 3‑1 左图是Windows200以前的鼠标，右图是Windows2000以后的鼠标，增加了阴影&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;再比如置顶窗口的一个时钟，透明地浮动在窗口，为你显示时间。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/public/forever-window-p4.jpg&quot; alt=&quot;img4&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;图 3‑2 透明时钟&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;再比如Office助手，这样的小玩意。它浮动在窗口的顶层，可能是一个老头，也可能是一个妙龄少女，或者是一个机器人，你问它答。Office助手已经完全脱离了传统的窗口样式&lt;/p&gt;

&lt;p&gt;还有…….等等这样的特殊效果，都是分层窗口所致。我再重复一遍，这篇文章我们不讨论太多的这种窗口，如果有兴趣我会再写另一篇文章《分层窗口——Windows进化的中间产物》。&lt;/p&gt;

&lt;h3 id=&quot;35单一处理消息窗口message-only-windows&quot;&gt;3.5   单一处理消息窗口（Message-Only Windows）&lt;/h3&gt;

&lt;p&gt;Message-Only Windows这个翻译成单一处理消息窗口，不知道是否妥贴。我一般翻译都不喜欢自创，一般会遵循大家普遍认可的翻译方式，但是Message-Only Windows也许大家不够关注，于是缺少一个普遍认可的词汇，不得已只有自己创造之。&lt;/p&gt;

&lt;p&gt;其实E文的名称已经足以说明该窗口是个什么咚咚，就是一个看不见，找不着，专门用来处理消息的窗口。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;相关参考:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://docs.microsoft.com/en-us/windows/win32/winmsg/window-features#message-only-windows&quot;&gt;Message-Only Windows&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/kwliu/archive/2011/07/30/2121861.html&quot;&gt;https://www.cnblogs.com/kwliu/archive/2011/07/30/2121861.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.codeproject.com/Articles/7969/How-to-make-a-Message-Only-Window&quot;&gt;https://www.codeproject.com/Articles/7969/How-to-make-a-Message-Only-Window&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;4消息循环&quot;&gt;4.消息循环&lt;/h2&gt;

&lt;p&gt;我们已经运行过代码 2‑2。事实是窗口昙花一现，一闪而过；原因是我们缺少最必要的一环就是消息循环。我每回在写一个标准的Windows程序时候，等到加消息循环的时候，就会有意停顿一下，因为感觉自己就像一个画龙的画师，等待着给龙点睛&lt;a href=&quot;https://www.cnblogs.com/helloj2ee/archive/2009/06/29/1513210.html#_ftn2&quot;&gt;[2]&lt;/a&gt;。点睛的龙，会一飞冲天；加上消息循环的窗口，则注入了生命。&lt;/p&gt;

&lt;p&gt;整个消息循环的代码如下，非常简单，三个函数和一个While循环搞定。但是要真正地解释清楚，这里面涉及到应用程序和操作系统的关系，还有消息，消息队列以及窗口过程等重要概念。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;MSG&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;......&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GetMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;TranslateMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;DispatchMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;代码 4‑1 消息循环的代码&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;事实上，我已经说过所有的应用程序都是系统和程序员进行配合完成的。我在阅读MSDN关于窗口这一部分文档，结合自己的编程经验，脑海里常常呈现出一幅应用程序和操作系统”你来浇水，我施肥”的和谐共建图。但是每回拿起笔，又感觉颇为艰难。一次无意当中随手随手翻翻侯捷大师的《深入浅出MFC》（经典书是常翻的），以前没有注意到的一幅图完全抓住了我的眼球。因为正是我脑海中常常浮现的一幅图，虽然这幅图还是有部分瑕疵，但是瑕不掩瑜，老实说我是画不出来的……&lt;/p&gt;

&lt;p&gt;一幅应用程序和操作系统”你来浇水，我施肥”的和谐共建图&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/public/forever-window-p5.jpg&quot; alt=&quot;img5&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;图4‑1 windows程序与操作系统关系（侯捷，1997）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;这幅图，如果简单的归纳只能用十二个字来表示”以消息为基础，以事件驱动之”。如果是E文，这更为简洁明了”message based, event driven”。但是这个就好比”五心向天”这样的口诀，光记下来是没用的，因此我们这一节都是围绕着这个图来解释这十二字真言。&lt;/p&gt;

&lt;p&gt;前面我们已经说过，当我们注册完窗口类（RegisterClass），创建窗口（CreateWindow）和显示窗口（ShowWindow，UpdateWindow）。一个应用程序就进入了消息循环，这个时候窗口所需要做的事情就是两个字——“等待”。操作系统说，”您该重绘了”，于是窗口就把自己重新画一遍，操作系统说”您该响应鼠标消息了”，窗口就响应一下鼠标消息。总之”敌不动，我不动，敌一动，我乱动”。&lt;/p&gt;

&lt;p&gt;人和人之间交流用语言，留便条或者打手机等等。操作系统和应用程序之间，他们用消息来进行这样的通讯。 操作系统说 ”您该重绘了”，它会向应用程序发送一个WM_PAINT消息；操作系统说”用户按下鼠标左键了”，它会向应用程序发送一个”WM_LBUTTONDOWN”消息等等。而窗口收到了这些消息，当然也需要处理这些消息，窗口有一个集中处理消息的办公地点，这个办公地点称之为”窗口过程”函数（WndProc）。实际上在注册窗口类的时候，就将一种特定类型的窗口和窗口过程函数绑定在了一起。倘若不记得，不妨回过头再看看窗口的创建一节。&lt;/p&gt;

&lt;p&gt;窗口过程函数就好象是一个专门处理消息的部门。当然这个小小的部门也不是所有大事小事都能完全处理，有些消息，窗口可以自己处理，但是有些消息，窗口处理不了。处理不了的事情按照常规当然是要及时上报，于是窗口过程函数的实现都是同一个模子。首先上来switch….case，处理消息1，消息2，消息3…..处理不了，那么交给操作系统去处理（default return DefWindowProc……），DefWindowProc函数的意思是让操作系统按照默认的方式处理消息。&lt;/p&gt;

&lt;p&gt;一个一个消息就好比一件一件公文，最终放到窗口过程函数的桌面上等待处理。但是这些公文的到来，也是有不同的途径。第一种途径当然是一种常规途径，就是按照先来后到的顺序，排成队处理。而第二种途径自然是特权途径，这种就好比领导打个电话或者递个条子语重心长地说”小李啊，这个特事要特办啊”。其实我还是蛮痛恨这种”递条子”现象。但是在计算机这档子事里还真是必须要有这种特权现象存在。&lt;/p&gt;

&lt;h2 id=&quot;41-两种不同的消息传递途径&quot;&gt;4.1 两种不同的消息传递途径&lt;/h2&gt;

&lt;h3 id=&quot;百姓苦排队型进队消息&quot;&gt;百姓苦排队型（进队消息）&lt;/h3&gt;

&lt;p&gt;我们现在来具体说说这两种途径。先说第一种途径，消息要一件一件处理，总要安排个地方给消息排队。因此操作系统为窗口安排了两个消息队列，消息来了统统在这两个消息队列里排队。然后应用程序的消息循环取出消息（GetMessage,TranslateMessage和DispatchMessage），传给窗口过程函数去处理。&lt;/p&gt;

&lt;p&gt;两个消息队列分别是系统消息队列（System Message Queue）和应用程序消息队列（Application Message Queue）。注意系统消息队列是唯一的，也就是说一个操作系统也就一个系统消息队列，用户点击鼠标，敲击键盘，由相应的鼠标和键盘驱动将这些外部事件转换为鼠标和键盘消息，然后放在系统消息队列里排队。操作系统非常聪明会知道某个鼠标键盘消息属于哪个窗口，然后把相应的消息放到特定窗口应用程序消息队列中。注意我再重复一遍，系统消息队列会把相应的消息放到特定窗口的应用程序消息队列中。换句话说，消息循环不会从系统消息队列里去取消息，只会从特定窗口的应用程序消息队列中取消息。因此侯先生的这幅图出现了一点小小的瑕疵，它应该修改成如下图。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/public/forever-window-p6.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;图 4‑2 windows程序与操作系统关系（作者修改）&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;而应用程序消息队列接受的都是该窗口的鼠标和键盘消息或者菜单消息等等。总之属于该窗口的消息都会最终放置在该窗口的应用程序消息队列里，以应用程序的眼光来看，是不需要知道该消息是放在系统消息队列还是应用程序消息队列，应用程序只需要从应用程序消息队列取消息即可。&lt;/p&gt;

&lt;h3 id=&quot;领导递条子型非进队消息&quot;&gt;领导递条子型（非进队消息）&lt;/h3&gt;

&lt;p&gt;第二种途径当然要”牛”很多。这种”牛”体现在两点上。第一这些消息从来不排队，直接抵达窗口过程函数。第二点更”牛”，这种消息到达窗口过程就必须得处理，处理不完就一直等待。幸运的是计算机里我们不需要送美女，送金钱，只需要调用SendMessage，这样消息就直接摆放在窗口过程的桌子上，窗口过程不处理都不行。&lt;/p&gt;

&lt;h2 id=&quot;42-几个特殊进队的消息&quot;&gt;4.2 几个特殊进队的消息&lt;/h2&gt;

&lt;p&gt;按说进队消息已经没什么特殊，他们都是老老实实地遵循先进先出（first in first out）的原则。但是仍然有些消息会特殊。按照常理来想，如果你要搞特殊，大可不排队，走领导递条子型不就得了。但是这些消息特殊，并不是特殊在他们要特权，他们的问题是太过谦让，看到其他消息总是说”您请先”。&lt;/p&gt;

&lt;p&gt;现在让我们介绍一下，这几个特殊而高尚的信息。他们分别是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WM_PAINT&lt;/code&gt;，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WM_TIMER&lt;/code&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WM_QUIT&lt;/code&gt;消息。这三个消息总在谦让，他们谦让的程度让人咂舌。消息队列里只要还有一条消息在排队，他们都不会往前，直到消息队列为空，才会交给窗口过程处理。&lt;/p&gt;

&lt;p&gt;当系统感觉到窗口需要重绘的时候，比如窗口大小，尺寸等发生变化，会向窗口发送&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WM_PAINT&lt;/code&gt;消息，告知窗口需要重绘。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WM_PAINT&lt;/code&gt;消息不仅会谦让，而且当消息队列里有多个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WM_PAINT&lt;/code&gt;消息，系统会自动合并成一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WM_PAINT&lt;/code&gt;消息，同时会将每个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WM_PAINT&lt;/code&gt;消息的无效矩形合并成一个大的无效矩形。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WM_PAINT&lt;/code&gt;之所以这样做，是因为避免窗口过多地重绘造成的系统低效。关于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WM_PAINT&lt;/code&gt;和无效矩形，我想还得再写一篇文章来说明这个问题。&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WM_TIMER&lt;/code&gt;是设置了计时器之后，系统会按照计时器规定的间隔时间来定时发送&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WM_TIMER&lt;/code&gt;消息。由于&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WM_TIMER&lt;/code&gt;消息是一个具有”先人后己”道德高尚的消息，因此，我们说这种计时器是不太准的，比如定时器设置了每50毫秒发送一次&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WM_TIMER&lt;/code&gt;消息，但是50毫秒的时候，消息队列里还有很多其他兄弟消息，于是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WM_TIMER&lt;/code&gt;就忍让了，可能51毫秒或者52毫秒的时候&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WM_TIMER&lt;/code&gt;消息才会放到消息队列当中。&lt;/p&gt;

&lt;p&gt;当应用程序需要退出的时候，系统会发送&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WM_QUIT&lt;/code&gt;消息。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WM_QUIT&lt;/code&gt;的谦让精神和前面的兄弟消息也是一样，就无需多言了。&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WM_QUIT&lt;/code&gt;的特殊之处，在于GetMessage一旦得到的是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WM_QUIT&lt;/code&gt;消息，就返回0，整个消息循环就结束了，Game Over！&lt;/p&gt;

&lt;h3 id=&quot;43-一个消息的完整结构&quot;&gt;4.3 一个消息的完整结构&lt;/h3&gt;

&lt;p&gt;其实我前面有埋一个伏笔，那就是操作系统怎么就能如此聪明，知道哪个消息是属于哪个窗口的呢？其实看看消息的结构，就不难知道答案。&lt;/p&gt;

&lt;div class=&quot;language-cpp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;typedef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;tagMSG&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;HWND&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hwnd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;UINT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;WPARAM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;wParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;LPARAM&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;DWORD&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

	&lt;span class=&quot;n&quot;&gt;POINT&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MSG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;消息结构体，总共有六个成员变量。第一个就是窗口句柄&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hwnd&lt;/code&gt;，这个参数就告诉我们是哪个窗口收到消息，操作系统可以根据这个信息将消息放到合适的窗口应用程序消息队列当中；第二个是消息的标识，比如WM_PAINT等；第三和第四参数都是用来存储消息的额外信息；第五个参数记录的是消息被放入到消息队列的时间；第六个参数是消息被放入到消息队列时，鼠标所在的位置。&lt;/p&gt;

&lt;h2 id=&quot;5-小结&quot;&gt;5. 小结&lt;/h2&gt;

&lt;p&gt;写到最后了，还是小结一下。&lt;/p&gt;

&lt;p&gt;Windows里一切都由窗口组成 &lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;窗口类是模具，窗口是成品 &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;窗口的类型样式很多，但归纳起来也就那么几种 &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;消息循环是窗口的灵魂，消息为基础，事件驱动之 &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;有特权的消息不排队，无特权的消息排队 &lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;但是总会有那些有谦让精神崇高的消息 &lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;我想《永远的窗口》此文就到此结束了……&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Jul 2020 19:06:50 +0800</pubDate>
        <link>http://localhost:4000/2020/07/05/forever-window-personal-view-on-window/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/07/05/forever-window-personal-view-on-window/</guid>
        
        <category>mfc</category>
        
        <category>windows</category>
        
        
        <category>windows</category>
        
      </item>
    
      <item>
        <title>深入浅出XAML</title>
        <description>&lt;p&gt;今天来聊聊深入浅出XAML的那些事~&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;Inside XAML&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Ian Griffiths/文, co-author of Mastering Visual Studio .NET&lt;/p&gt;

&lt;p&gt;01/19/2004&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Longhorn 为开发人员提供的最有趣技术之一就是其基于XML的新标记语言，开发代号为XAML（eXtensible ApplicationMarkup Language〈可扩展应用标记语言〉的缩写，发音为”Zammel”）。Longhorn应用程序中的用户界面通常是使用XAML来构建的。 在本文中，我们将考察XAML与WinFX 提供的底层支持如何相关。&lt;/p&gt;

&lt;p&gt;XAML用户界面的构建方式与HTML Web用户界面的构建方式非常相似——只需使用标签来为所需要的每个界面元素创建一个文档。下面是一个简单的XAML用户界面：&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;FlowPanel&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/2003/xaml&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Text&amp;gt;&lt;/span&gt;Hello World&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Text&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Button&amp;gt;&lt;/span&gt;Click me!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Button&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/FlowPanel&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这个特定的例子显示一个Text元素和一个Button元素，同时使用FlowPanel 在屏幕上排列它们。这些全都是Avalon定义的类，Avalon 是WinFX 的用户界面框架。Text 和Button元素是不言而喻的。FlowPanel 是窗格的一个例子。窗格用于根据特定的布局方法安排元素。FlowPanel 在屏幕上安排元素的方式与通常对文本进行格式编排的方式相同——元素从左至右地“流”过可用空间，在当前行没有更多空间时移到下一行上。结果如下所示。（第一幅图片显示了这样一个窗口，它足够宽到可在一行上同时包含两个元素。第二幅图片显示了当窗口不足够宽时所发生的情况 —— FlowPanel 将元素分割到两行上。）Avalon提供了针对不同布局技术的各种窗格类型，包括固定布局、停靠，以及基于列的文本流。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/2020/xaml-img1.png&quot; alt=&quot;img1&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/2020/xaml-img2.png&quot; alt=&quot;img2&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;为什么要发明一种新的标记语言&quot;&gt;为什么要发明一种新的标记语言?&lt;/h2&gt;

&lt;p&gt;你可能在疑感为什么Microsoft决定发明一种崭新的标记语言来构建用户界面，而不是使用HTML或SVG。原因之一是功能——Avalon 提供许多HTML中不可用的高级用户界面特性，比如文本和图形的缩放和旋转，以及动画。此外，HTML主要是为在Web上使用而开发的，而XAML主要针对的是直接运行在Windows上的应用程序(即“胖客户机”(Rich Client)或“智能客户机”)。但是这仍然留下了为什么微软不使用SVG(Scalable Vector Graphics,可缩放矢量图形，这是一种基于XML的图形丰富的标记语言)的问题。毕竟，SVG弥补了HTME作为胖客户机标记语言所其有的许多缺点。然而，设计一种新标记语言的最有力原因在于，XAML文件中的元素之间以及运行时的对象之间存在非常紧密的关系。不像任何早前的标记语言，XAML被设计为直接与WinFX集成。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;xaml和对象&quot;&gt;XAML和对象&lt;/h2&gt;

&lt;p&gt;XAML文件中的每个元素都会导致在运行时创建一个对应的对象。在前面的例子中，运行中的程序将具有三个对象，分别是FlowPanel，Text和Button类型。这些类是Avalon类库的组成部分。由于命名空间声明的存在，XAML编译器知道要使用哪些类库 一 XAML编译器将XML命名空间http://schemas.microsoft.com/2003/xaml理解为要使用Avalon类。&lt;/p&gt;

&lt;p&gt;你还可以定义自定义的命名空间来使用类库。（原则上，你可以在XAML中使用任何.NET类。Don Box曾撰写过一篇文章表明，如果需要，你甚至可以用XAML编写控制台应用程序。）&lt;/p&gt;

&lt;p&gt;XAML文件通常是编译过的，而不是在运行时分析（虽然在确实需要时也可以采用运行时分析）在构建基于XAML的项目时，XAML编译器将分别为每个XAML文件生成一个类。这些类包含用于创建XAML中指定的对象的代码。如果你感到好奇，可以找出这些已生成的代码。使用支持Longhorn的Visual Studio .NET Whidbey版本（在2003年的专业开发人员大会——PDC上公布），你可以使用Longhorn Application模板之一来创建新的基于XAML的项目。在编译项目时，XAML编译器将为每个XAML文件生成一个临时源代码文件。这些文件将创建在obj\Debug or obj\Release子目录中。例如，如果将上述例子中的XAML放在一个名为MyPanel.xaml 的文件中，生成（build ）该项目将产生一个临时文件&lt;/p&gt;

&lt;p&gt;obj\Debug\MyPanel.g.cs。（如果使用Visual Basic .NET，文件扩展名将是.vb 而不是.cs。）&lt;/p&gt;

&lt;p&gt;观察一下这个生成的文件的内部，你会找到一个类定义。&lt;/p&gt;

&lt;p&gt;对于每个XAML文件，XAML编译器都会构建一个类，这个类派生自该文件的根元素的类。在前面所示的例子中，根元素是FlowPanel，因此所生成的类就派生自FlowPanel：&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;partial&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyPanel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MSAvalon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Windows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Controls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FlowPanel&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在该类的初始化代码内部，它创建了XAML中指定的其他元素。&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;MSAvalon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Windows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Controls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FlowPanel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_FlowPanel_1_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSAvalon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Windows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serialization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ILoaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_FlowPanel_1_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DeferLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;MSAvalon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Windows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Controls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_Text_2_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; 

    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MSAvalon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Windows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Controls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSAvalon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Windows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serialization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ILoaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_Text_2_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DeferLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSAvalon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Windows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serialization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IAddChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_FlowPanel_1_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_Text_2_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSAvalon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Windows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serialization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IAddChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_Text_2_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello World&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSAvalon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Windows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serialization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ILoaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_Text_2_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;EndDeferLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;MSAvalon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Windows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Controls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_Button_3_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; 

    &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MSAvalon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Windows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Controls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSAvalon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Windows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serialization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ILoaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_Button_3_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;DeferLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSAvalon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Windows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serialization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IAddChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_FlowPanel_1_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_Button_3_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSAvalon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Windows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serialization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IAddChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_Button_3_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AddText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Click me!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSAvalon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Windows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serialization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ILoaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_Button_3_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;EndDeferLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSAvalon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Windows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Serialization&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ILoaded&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_FlowPanel_1_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;

    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;EndDeferLoad&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;其中创建Text和Button 对象的行以粗体高亮显示。其余的代码不过就是设置两个元素的文本，然后使它们成为FlowPanel的子元素，以便在运行时反映原始XAML的树结构。注意所有这些代码都是在编译时生成的——XAML本身在运行时并不需要。（综上所述，如果想要动态生成用户界面，就不必执行这个编译步骤——在运行时分析XAML也是可以的。WinFX提供了一个用于将未编译的XAML直接转换为对象的API。）&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;属性property&quot;&gt;属性（property）&lt;/h2&gt;

&lt;p&gt;像创建对象一样，XAML还允许设置那些对象上的属性。例如，让我们把创建Button 的行修改如下：&lt;/p&gt;
&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Background=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Red&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Click me!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Button&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这表明应该设置Button对象的Background 属性。XAML编译器将生成相应的代码来设置该属性：&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;Button_3_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Background&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MSAvalon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Windows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Media&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;SolidColorBrush&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MSAvalon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Windows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Media&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;FromARGB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;如果想知道XAML编译器如何将字符串Red 映射为上面的代码，事实上它使用了一种自从.NET的第一版发布以来就已存在的技术：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;类型转换器&lt;/code&gt;。类型转换器是.NET设计时环境的一部分，用于在VS.NET Properties窗口中显示的字符串和对象属性的实际值之间执行转换。类型转换器还可以生成代码来初始化这些属性——VS.NET使用它们来创建Windows Forms应用程序的InitializeComponent方法中的代码。XAML 编译器简单地使用这个现有的基础结构，将特性（attribute）字符串值转换为初始化代码。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;复杂属性&quot;&gt;复杂属性&lt;/h2&gt;

&lt;p&gt;并非所有属性都可表示为字符串–有些属性具有一个包含许多嵌套对象的内部结构。XAML支持一种特殊的语法，用于设置这些所谓的复杂属性。与使用特性（attribute）来设置属性（property），相反，这些属性可以使用子元素来设置。为了表明一个XAML元素表示一个复杂属性而不是表示通常的子对象，元素名称必须包含父元素的名称，后面跟着一个点，然后再跟着属性名称，如下面的例子所示：&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Button&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Button.Background&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;LinearGradientBrush&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;LinearGradientBrush.GradientStops&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;GradientStopCollection&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;GradientStop&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Red&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Offset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;GradientStop&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Magenta&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Offset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.25&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;GradientStop&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Blue&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Offset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.5&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;GradientStop&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;White&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Offset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/GradientStopCollection&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/LinearGradientBrush.GradientStops&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/LinearGradientBrush&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Button.Background&amp;gt;&lt;/span&gt;
  Click me!
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Button&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;与依赖通常的类型转换器机制来将字符串转换为画笔不同，这个例子显式地使用标记来创建了一个画笔。在此例中，我们创建了一个相当复杂的画笔——具有许多填充阶次的LinearGradientBrush。这个例子展示了两个复杂属性，一个属性嵌套在另一个属性的内部。&lt;Button.Background&gt;元素设置按钮的背景属性， 但是在这个元素的内部，&lt;LinearGradientBrush.GradientStops&gt;元素设置线性渐变画笔的GradientStops属性。复杂属性的语法与其他任何XAML属性的语法完全相同——它允许建立对象的树结构。唯一的区别在于，这些属性然后被指定为它们所应用到的元素的属性，而不是成为那些元素的子元素。结果如下所示：&lt;/LinearGradientBrush.GradientStops&gt;&lt;/Button.Background&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/2020/xaml-img3.png&quot; alt=&quot;Click me&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;添加代码&quot;&gt;添加代码&lt;/h2&gt;

&lt;p&gt;正如我们已经看到的，XAML编译器分别为每个XAML文件生成一个类。那些类从对应XAML文件的根元素类型派生而来，并且包含用于创建所有子元素的代码，如上所示。然而，这些生成的代码对于创建实用的UI 还不足够。大多数用户界面并不只是提供信息——它们通常还需要能够响应用户输入。因此你通常需要添加代码来提供用户界面的行为。把代码插入XAML 文件本身是可以做到的。你可以在Definition 命名空间中添加一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;Code&amp;gt;&lt;/code&gt;元素。（根据约定，Definition命名空间被映射到def命名空间前缀，因此这个元素通常以&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;def:Code&amp;gt;&lt;/code&gt;的形式出现。）然后你可以把源代码直接放在这个元素内部，XAML编译器将把它添加到所生成的源文件中。这些代码通常添加到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CDATA&lt;/code&gt;节之内，如下面的例子所示：&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;FlowPanel&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/2003/xaml&quot;&lt;/span&gt;
    &lt;span class=&quot;na&quot;&gt;xmlns:def=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Definition&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Text&amp;gt;&lt;/span&gt;Hello World&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Text&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Button&amp;gt;&lt;/span&gt;Click me!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Button&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;def:Code&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;cp&quot;&gt;&amp;lt;![CDATA[
        // Will be added to generated source file
        public string Hello()
        {
          return &quot;Hello!&quot;; 
        }
      ]]&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/def:Code&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/FlowPanel&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;然而，对于建立动态Web页面有过足够经验的任何人都知道，在单个源文件中混合代码和标记是一种不可维护的方案。将用户界面的可视设计与决定UI 行为的代码分离，这样要好得多。幸运的是，XAML使得将代码与标记分离很容易——它支持这样一种代码编写风格，只要你使用过ASP.NET 的“code-behind（代码分离）”特性，就会对这种代码编写风格很熟悉。（如果熟悉ASP.NET的Whidbey 版本所引入的“code-beside”技术，你会对这种代码编写风格更加熟悉。）从上面的例子可以看出，XAML编译器生成的类使用了partial关键字来声明。这向C#编译器表明，该类定义可能分散在多个&lt;/p&gt;

&lt;p&gt;源文件中，而这个声明仅包含该定义的一部分。这样使得我们能够通过在另一个源文件中放置更多成员来扩充该类–C#编译器将生成这样一个类，它是为该类提供的所有partial类定义的汇总。&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;partial&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyPanel&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Hello&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当你在Visual Studio .NET中创建一个XAML项目时，添加到项目的每个XAML文件都会自动具有一个对应的源文件，其中包含一个partial 类定义，允许你向将从XAML文件生成的代码添加新的代码。你可以通过单击Solution Explorer中的Show All Files 按钮来看到这些code-behind 文件。注意，如果在code-behind文件中指定了基类，它必须与所生成的代码的基类（即XAML文件的根元素）匹配——如果指定了不一致的基类，C#编译器将提示出错。&lt;/p&gt;

&lt;p&gt;在编写XAML文件的代码时，你当然需要能够访问标记所定义的对象，以便控制UI。结果证明这是极其简单的：你所需做的就是在标记中使用一个ID特性来标注你希望能够访问的对象，如下所示：&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Text&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ID=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;textElem&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Hello World&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Text&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样做之后，XAML编译器将使得这个对象可以像该类的成员变量一样使用，也就是使用ID特性中所指定的名称。例如，你可以将上面的元素中的文本修改如下：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;textElem.TextRange.Text = &quot;Foo&quot;;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;你通常不会像上面的例子那样在公共方法编写这种代码。code-behind 文件中的大多数代码都在事件处理程序方法中。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;处理事件&quot;&gt;处理事件&lt;/h2&gt;

&lt;p&gt;向XAML页面添加代码的主要原因是为了处理事件——或者是来自用户的输入，或者是用户界面生存期中的重要事件。&lt;/p&gt;

&lt;p&gt;向XAML编译器表明我们的code-behind文件中的代码应该在某些事件发生时调用，这是一件简单的事情。我们只需向希望其处理事件的元素添加一个特性。该特性的名称应该是事件的名称，其值应该是code-behind文件中的处理程序方法的名称。例如，我们可以像下面这样处理按钮单击事件：&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Click=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;OnClick&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Click me!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Button&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样将导致XAML编译器生成相应代码，把OnClick函数附加为事件处理程序。它使用标准的.NET事件处理机制来完成这个工作，例如：&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;_Button_4_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Click&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; 
&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MSAvalon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Windows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Controls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ClickEventHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;OnClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;为了使这段代码能够正确地编译，我们当然必须在codebehind文件中提供适当的OnClick函数。与.NET程序中的所有事件处理程序一样，该函数的签名必须匹配事件的委托（delegate）类型。在此例中，按钮的Click 事件使用了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ClickEventHandler&lt;/code&gt;委托，因此我们必须编写一个具有匹配的签名的函数。&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OnClick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ClickEventArgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;textElem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TextRange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Text&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Foo&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;结束语&quot;&gt;结束语&lt;/h2&gt;

&lt;p&gt;XAML是生成.NET对象树的简单而强大的方法。由于它基于XML，创建基于XAML的标记就很简单了。这不仅使得手工构建用户界面很容易，而且使得通过工具来生成XAML也相对简单——今后，能够导出文档和以XAML格式来绘制的设计工具将会出现。使用诸如XSLT之类的技术来将XML数据源转换为XAML文档也很容易。XAML通过code-behind文件支持用户界面与代码的完全分离，而它与WinFX的紧密集成使得代码操作标记中定义的用户界面元素非常容易。&lt;/p&gt;
</description>
        <pubDate>Thu, 02 Jul 2020 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2020/07/02/inside-xaml/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/07/02/inside-xaml/</guid>
        
        <category>wpf</category>
        
        
        <category>[&quot;life&quot;, &quot;xaml&quot;, &quot;wpf&quot;]</category>
        
        <category>[&quot;life&quot;, &quot;xaml&quot;, &quot;wpf&quot;]</category>
        
        <category>life</category>
        
        <category>xaml</category>
        
        <category>wpf</category>
        
      </item>
    
      <item>
        <title>WPF中的Data Binding调试指南</title>
        <description>&lt;p&gt;大家平时做WPF开发，相信用Visual studio的小伙伴比较多。XAML里面曾经在某些特殊版本的Visual Studio中是可以加断点进行调试的，不过目前多数版本都不支持在XAML加断点来调试。&lt;/p&gt;

&lt;p&gt;那如果自己需要绑定的 Property 没生效，该怎么去检测或Debug排查问题呢？下面大白给出几种自己用过的方法，本人的开发环境是 Win10专业版x64 + Visual Studio 2019专业版v16.2.2，以下方法都亲测有效。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;方法1-修改注册表--修改config文件&quot;&gt;方法1: 修改注册表 + 修改config文件&lt;/h2&gt;

&lt;p&gt;在注册表中增加一个选项，&lt;/p&gt;

&lt;p&gt;具体做法是，在目录&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;HKEY_CURRENT_USER\Software\Microsoft&lt;/code&gt;中创建文件夹&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Tracing&lt;/code&gt;, 然后在其里面创建子文件夹&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WPF&lt;/code&gt;，然后新建一个DWORD(32位)值ManagedTracing，将其值设置为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/2020/wpf-debug1.png&quot; alt=&quot;大白技术控geekplayers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;也可以将下面的文件另存为 trace.reg，然后双击进行设置。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-reg&quot;&gt;Windows Registry Editor Version 5.00

[HKEY_CURRENT_USER\Software\Microsoft\Tracing\WPF]
&quot;ManagedTracing&quot;=dword:00000001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接下来，需要在你的Project的能影响 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.exe.config&lt;/code&gt;生成的那个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.config&lt;/code&gt;文件下加入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;折叠区域&lt;/code&gt;的内容:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/2020/wpf-debug2.png&quot; alt=&quot;大白技术控geekplayers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;由于我这边相关的config文件就是&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App.config&lt;/code&gt;，所以只需在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;App.config&lt;/code&gt;中加入该内容。&lt;/p&gt;

&lt;p&gt;图中折叠的部分如下:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;system.diagnostics&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;sources&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;System.Windows.Data&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;switchName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BindingSwitch&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;listeners&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BindingTextListener&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/listeners&amp;gt;&lt;/span&gt;   
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
      
       &lt;span class=&quot;c&quot;&gt;&amp;lt;!--&amp;lt;source name=&quot;System.Windows.Data&quot; switchName=&quot;BindingSwitch&quot; &amp;gt;
        &amp;lt;listeners&amp;gt;
          &amp;lt;add name=&quot;BindingXmlListener&quot; /&amp;gt;
        &amp;lt;/listeners&amp;gt;      
      &amp;lt;/source&amp;gt;--&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;System.Windows.DependencyProperty&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;switchName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BindingSwitch&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;listeners&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BindingTextListener&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/listeners&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;System.Windows.Freezable&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;switchName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BindingSwitch&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;listeners&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BindingTextListener&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/listeners&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;System.Windows.RoutedEvent&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;switchName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BindingSwitch&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;listeners&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BindingTextListener&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/listeners&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;System.Windows.Media.Animation&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;switchName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BindingSwitch&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;listeners&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BindingTextListener&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/listeners&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;System.Windows.NameScope&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;switchName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BindingSwitch&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;listeners&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BindingTextListener&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/listeners&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;System.Windows.ResourceDictionary&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;switchName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BindingSwitch&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;listeners&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BindingTextListener&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/listeners&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;System.Windows.Markup&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;switchName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BindingSwitch&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;listeners&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BindingTextListener&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/listeners&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;System.Windows.Documents&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;switchName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BindingSwitch&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;listeners&amp;gt;&lt;/span&gt;
          &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BindingTextListener&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/listeners&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
      
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/sources&amp;gt;&lt;/span&gt;
      
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;switches&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BindingSwitch&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;All&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!--add name=&quot;BindingSwitch&quot; value=&quot;Off&quot; --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!--add name=&quot;BindingSwitch&quot; value=&quot;Verbose&quot; --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!--add name=&quot;BindingSwitch&quot; value=&quot;Warning&quot; --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!--add name=&quot;BindingSwitch&quot; value=&quot;Activity&quot; --&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/switches&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;sharedListeners&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- This listener sends output to a file named BindingTrace.log (text) --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BindingTextListener&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;System.Diagnostics.TextWriterTraceListener&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;initializeData=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BindingTrace.log&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- This listener sends output to the console --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;console&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;System.Diagnostics.ConsoleTraceListener&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;initializeData=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;false&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- This listener sends output to an Xml file named BindingTrace.xml --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BindingXmlListener&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;System.Diagnostics.XmlWriterTraceListener&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;traceOutputOptions=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;None&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;initializeData=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BindingTrace.xml&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/sharedListeners&amp;gt;&lt;/span&gt;

    &lt;span class=&quot;nt&quot;&gt;&amp;lt;trace&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;autoflush=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;true&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;indentsize=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/trace&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/system.diagnostics&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;设置好后，你build这个wpf项目后，当启动Debug时，在其相应的debug目录下会多出一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BindingTrace.log&lt;/code&gt;文件，比如, 我这边的内容上这样的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/2020/wpf-debug3.png&quot; alt=&quot;大白技术控geekplayers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;我配置监听器(listener)时，将debug的信息设置成了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.log&lt;/code&gt;格式，与&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.txt&lt;/code&gt;格式相比其优势是: 当用vs code打开时，自带高亮，看起来比较爽。&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;      &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- This listener sends output to a file named BindingTrace.log (text) --&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BindingTextListener&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;System.Diagnostics.TextWriterTraceListener&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;initializeData=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BindingTrace.log&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;当然也有小伙伴希望将Trace信息导出为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xml&lt;/code&gt;，也可以的，只需将加入内容开头部分的:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;listeners&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BindingTextListener&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/listeners&amp;gt;&lt;/span&gt;   
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
  
   &lt;span class=&quot;c&quot;&gt;&amp;lt;!--&amp;lt;source name=&quot;System.Windows.Data&quot; switchName=&quot;BindingSwitch&quot; &amp;gt;
    &amp;lt;listeners&amp;gt;
      &amp;lt;add name=&quot;BindingXmlListener&quot; /&amp;gt;
    &amp;lt;/listeners&amp;gt;
      &amp;lt;/source&amp;gt;  --&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;改为:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;  &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- &amp;lt;source&amp;gt;
	&amp;lt;listeners&amp;gt;
      &amp;lt;add name=&quot;BindingTextListener&quot; /&amp;gt;
    &amp;lt;/listeners&amp;gt;   
  &amp;lt;/source&amp;gt; --&amp;gt;&lt;/span&gt;
  
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;source&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;System.Windows.Data&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;switchName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BindingSwitch&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;listeners&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;add&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BindingXmlListener&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/listeners&amp;gt;&lt;/span&gt;
   &lt;span class=&quot;nt&quot;&gt;&amp;lt;/source&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;即可。&lt;/p&gt;

&lt;p&gt;那么，此时在其相应的debug目录下会多出一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;BindingTrace.xml&lt;/code&gt;文件，我这边的内容上这样的：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/2020/wpf-debug4.png&quot; alt=&quot;大白技术控geekplayers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;参考:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://systemscenter.ru/scsm_authoringtool.en/html/b24efd85-0ced-48ea-8ecc-d816c789bae2.htm&quot;&gt;https://systemscenter.ru/scsm_authoringtool.en/html/b24efd85-0ced-48ea-8ecc-d816c789bae2.htm&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/furenjun/archive/2011/08/01/2123983.html&quot;&gt;https://www.cnblogs.com/furenjun/archive/2011/08/01/2123983.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;WPF Tutorial | Debug DataBinding Issues
&lt;a href=&quot;https://www.wpftutorial.net/DebugDataBinding.html&quot;&gt;https://www.wpftutorial.net/DebugDataBinding.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;old-wpf-blog/45-DebuggingDataBinding at master · bstollnitz/old-wpf-blog
&lt;a href=&quot;https://github.com/bstollnitz/old-wpf-blog/tree/master/45-DebuggingDataBinding&quot;&gt;https://github.com/bstollnitz/old-wpf-blog/tree/master/45-DebuggingDataBinding&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;方法2-在xaml中设置tracelevel--在xaml中需要debug的view对应的-xamlcs文件中启用wpf-trace&quot;&gt;方法2: 在XAML中设置TraceLevel + 在xaml中需要debug的View对应的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.xaml.cs&lt;/code&gt;文件中启用WPF Trace&lt;/h2&gt;

&lt;p&gt;该方法适用于 .NET framework 3.5以后(包括 .NET core)的WPF project.&lt;/p&gt;

&lt;p&gt;首先需要给该View的xaml文件的某个节点加入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; PresentationTraceSources.TraceLevel=&quot;High&quot;&lt;/code&gt;,&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;UserControl&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x:Class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CaliburnMicro_Calculator.Views.CalculatorView&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;xmlns:x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;xmlns:mc=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;xmlns:d=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/expression/blend/2008&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;xmlns:local=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clr-namespace:CaliburnMicro_Calculator.Views&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;xmlns:cal=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.caliburnproject.org&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;mc:Ignorable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;d&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;Width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;240&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;我这边直接在这个view的根节点&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;UserControl&amp;gt;&lt;/code&gt;中加入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt; PresentationTraceSources.TraceLevel=&quot;High&quot;&lt;/code&gt;，结果如下:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;UserControl&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x:Class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CaliburnMicro_Calculator.Views.CalculatorView&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;xmlns:x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;xmlns:mc=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.openxmlformats.org/markup-compatibility/2006&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;xmlns:d=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/expression/blend/2008&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;xmlns:local=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;clr-namespace:CaliburnMicro_Calculator.Views&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;xmlns:cal=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://www.caliburnproject.org&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;mc:Ignorable=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;d&quot;&lt;/span&gt;
             &lt;span class=&quot;na&quot;&gt;Width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;240&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;PresentationTraceSources.TraceLevel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;High&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时，我们还需要在目标View的对应的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.xaml.cs&lt;/code&gt;文件中启用WPF Trace.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;            &lt;span class=&quot;c1&quot;&gt;// Enable WPF tracing&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;PresentationTraceSources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Refresh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;PresentationTraceSources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataBindingSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Listeners&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ConsoleTraceListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;PresentationTraceSources&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataBindingSource&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Switch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Level&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SourceLevels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;All&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;此时，在Output(输出窗口)就可以看到数据绑定的相关信息了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/2020/wpf-debug5.png&quot; alt=&quot;大白技术控geekplayers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可能有人会好奇output中的红色字体是怎么来的，vs的output默认是黑色。&lt;/p&gt;

&lt;p&gt;其实安装一个vs插件&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;VSColorOutput&lt;/code&gt;就好了，传送门:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=MikeWard-AnnArbor.VSColorOutput&quot;&gt;https://marketplace.visualstudio.com/items?itemName=MikeWard-AnnArbor.VSColorOutput&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;当然，你还可以在此时启用”诊断工具”，位置是： 调试 -&amp;gt; 窗口 -&amp;gt; 显示诊断工具，配合起来用起来更爽喔~&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/2020/wpf-debug6.png&quot; alt=&quot;大白技术控geekplayers&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;方法3-visual-studio-2019-164之后的版本安装-xaml-binding-extension&quot;&gt;方法3: Visual Studio 2019 (16.4之后的版本)安装 XAML binding extension&lt;/h2&gt;

&lt;p&gt;这个VS插件由微软XAML团队推出，看起来像是实现了方法1或方法2的自动化。&lt;/p&gt;

&lt;p&gt;XAML binding extension for Visual Studio 2019 下载地址:
&lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=PeterSpa.XamlBinding&quot;&gt;https://marketplace.visualstudio.com/items?itemName=PeterSpa.XamlBinding&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;相关代码已开源:&lt;/p&gt;

&lt;p&gt;spadapet/xaml-binding-tool: XAML binding error window in a Visual Studio 2019 extension
&lt;a href=&quot;https://github.com/spadapet/xaml-binding-tool&quot;&gt;https://github.com/spadapet/xaml-binding-tool&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;当安装好这个插件时，重启VS就可以用了，debug时，调试窗口中会多一个选项”XAML binding failures (experimental)”。点击该选项，debug相关窗口中会显示&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Data binding&lt;/code&gt;的详细信息。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/2020/wpf-debug7.png&quot; alt=&quot;大白技术控geekplayers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此时，&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WPF trace level&lt;/code&gt;附近的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;...&lt;/code&gt;还可以点击进行设置。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/2020/wpf-debug8.png&quot; alt=&quot;大白技术控geekplayers&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;方法4-使用第三方debug工具-wpf&quot;&gt;方法4: 使用第三方debug工具 WPF&lt;/h2&gt;

&lt;p&gt;首推Snoop，这个工具大概2006年就出来了，历史悠久，最初由微软Blend团队的Pete Blois开发，功能也异常强大，而且目前也一直有人维护和更新。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/2020/wpf-debug9.png&quot; alt=&quot;大白技术控geekplayers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;左上角支持filter，属性或层级很多时，可以快速定位目标节点。&lt;/p&gt;

&lt;p&gt;Snoop中的Tree, Properties, Data Context均支持filter，而Properties和Data Context都可以打断点。&lt;/p&gt;

&lt;p&gt;当属性值更改，整个属性的背景更改为&lt;strong&gt;黄色&lt;/strong&gt;高亮一秒钟，以吸引用户注意。&lt;/p&gt;

&lt;p&gt;Snoop允许您查看您在应用程序中指定的事件列表。当您单击元素时，您可以看到哪些元素受到影响，并查看哪个（方法或任何人）处理该点击。Hanlded的事件以&lt;strong&gt;绿色&lt;/strong&gt;显示。这是Snoop提供的查看隧道和事件冒泡传递之间的区别的强有力方法，特别是当这些事件处理得太快或根本不处理，它们如何影响您的可视化元素。&lt;/p&gt;

&lt;p&gt;当出现binding error时，可以选择应用程序右侧的属性，然后右键单击以深入了解绑定或绑定表达式，以便给出更详细的错误说明。&lt;/p&gt;

&lt;p&gt;在Snoop的左上角，有一个下拉框可以打开，然后选择”Show only Visuals with binding Errors”以查看应用程序所具有的可视数据绑定错误列表。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/2020/wpf-debug10.png&quot; alt=&quot;大白技术控geekplayers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Snoop 的一个众所周知的功能是能够识别数据绑定问题。当看到组件是否绑定正确时，我通常只是尝试一下，看看它是否有效。如果无效，我转向 Visual Studio 调试模式下的output窗口。如果无法立即看到该值，我会这样做：将 Snoop 附加(Attach)到我的应用，并从应用程序树视图上方的搜索/筛选器栏中选择”Show only visuals with binding errors”选项。&lt;/p&gt;

&lt;p&gt;Attach和Debug的步骤如下:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;以管理员权限启动snoop&lt;/li&gt;
  &lt;li&gt;在代码里面的合适地方加上断点&lt;/li&gt;
  &lt;li&gt;Ctrl + F5 运行项目&lt;/li&gt;
  &lt;li&gt;重现需要debug的界面&lt;/li&gt;
  &lt;li&gt;调试 -&amp;gt; Debug -&amp;gt; 附加到进程(Attach)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然后在snoop上依次点:&lt;/p&gt;

&lt;p&gt;Refresh按钮, Snoop按钮(望远镜)，借助filter找需要inspect的目标元素，接下来 debug就比较顺畅了。&lt;/p&gt;

&lt;p&gt;还可以使用它来显示任何具有绑定错误(Binding error)的控件（就像word中的拼写检查一样）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/2020/wpf-debug11.png&quot; alt=&quot;大白技术控-snoop绑定&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Snoop 中的绑定错误会&lt;strong&gt;红色&lt;/strong&gt;高亮显示&lt;/p&gt;

&lt;p&gt;也有小伙伴在用或WPF Inspector，不过这个工具好久没更新了。
&lt;img src=&quot;//cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/2020/wpf-debug12.png&quot; alt=&quot;WPF inspect-大白技术控&quot; /&gt;&lt;/p&gt;

&lt;p&gt;WPF Inspector 这个项目之前是在CodePlex上的，后来没人维护了，目前有人手动fork到github上，但没见任何更新。&lt;/p&gt;

&lt;p&gt;还有小伙伴用  &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Mole&lt;/code&gt;这个Visual Studio 插件，有兴趣的朋友可以去试试~&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Mole for Visual Studio插件下载:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Mole for VS 2015 is installed from the &lt;a href=&quot;https://visualstudiogallery.msdn.microsoft.com/1d05cb44-8686-496b-9af3-4ed3deed3596&quot;&gt;Visual Studio Marketplace&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Mole for VS 2017 is installed from the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=KarlShifflettkdawg.MoleforVisualStudio2017&quot;&gt;Visual Studio Marketplace&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Mole for VS 2019 is installed from the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=KarlShifflettkdawg.MoleforVisualStudio2019&quot;&gt;Visual Studio Marketplace&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/2020/wpf-debug13.png&quot; alt=&quot;mole&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;其他方法&quot;&gt;其他方法:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;将&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Binding&lt;/code&gt;改为&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;x:Binding&lt;/code&gt;后进行调试&lt;/li&gt;
  &lt;li&gt;增加一个 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ValueConverter&lt;/code&gt;，调用它进行调试&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这两种本人不太熟悉，有兴趣的可以自己去试试哈~&lt;/p&gt;
</description>
        <pubDate>Sat, 27 Jun 2020 06:14:09 +0800</pubDate>
        <link>http://localhost:4000/2020/06/27/wpf-data-binding-debug-guide/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/06/27/wpf-data-binding-debug-guide/</guid>
        
        <category>wpf</category>
        
        
        <category>wpf</category>
        
      </item>
    
      <item>
        <title>一大波开发者福利来了，一份微软官方Github上发布的开源项目清单等你签收</title>
        <description>&lt;p&gt;一份微软官方Github上发布的开源项目清单等你签收!&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;最近在倒腾&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WPF&lt;/code&gt;的项目，试着搜一下微软官方提供的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WPF Smaples&lt;/code&gt;, 结果找到了&lt;a href=&quot;https://github.com/Microsoft/WPF-Samples&quot;&gt;https://github.com/Microsoft/WPF-Samples&lt;/a&gt;. 当然还发现了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Cortana&lt;/code&gt;相关的开源资料&lt;a href=&quot;https://microsoft.github.io/UWPQuickStart/docs/challenges/cortana-integration.html&quot;&gt;https://microsoft.github.io/UWPQuickStart/docs/challenges/cortana-integration.html&lt;/a&gt;和&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;UWP&lt;/code&gt;资源&lt;a href=&quot;https://microsoft.github.io/UWPQuickStart/docs/resources.html&quot;&gt;https://microsoft.github.io/UWPQuickStart/docs/resources.html&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;微软github开源项目入口&quot;&gt;微软Github开源项目入口&lt;/h2&gt;

&lt;p&gt;当你访问网址&lt;a href=&quot;https://microsoft.github.io&quot;&gt;https://microsoft.github.io&lt;/a&gt;时，会自动跳转到&lt;a href=&quot;https://opensource.microsoft.com&quot;&gt;https://opensource.microsoft.com&lt;/a&gt;，于是可知微软开源项目入口即为&lt;a href=&quot;https://opensource.microsoft.com&quot;&gt;https://opensource.microsoft.com&lt;/a&gt;或&lt;a href=&quot;https://microsoft.github.io&quot;&gt;https://microsoft.github.io&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;微软开源项目受欢迎程度排名&quot;&gt;微软开源项目受欢迎程度排名&lt;/h2&gt;

&lt;p&gt;打开主页&lt;a href=&quot;https://opensource.microsoft.com&quot;&gt;https://opensource.microsoft.com&lt;/a&gt;，将排序条件从默认的&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Trending&lt;/code&gt;切换到&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Stars&lt;/code&gt;, 即可看到Star最多的项目，同理&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Forks&lt;/code&gt;是按&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fork&lt;/code&gt;的量排序，A&lt;strong&gt;A&lt;/strong&gt; Name是按项目名字典序排序。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/436938/201903/436938-20190330192249612-1866737019.png&quot; alt=&quot;sort-by-stars&quot; /&gt;
&lt;img src=&quot;//cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/2020/wpf-debug1.png&quot; alt=&quot;大白技术控geekplayers&quot; title=&quot;大白技术控Bravo Yeung&quot; /&gt;&lt;/p&gt;

&lt;p&gt;还可点击&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;← Previous &lt;/code&gt;或&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Next →&lt;/code&gt;来进行翻页。&lt;/p&gt;

&lt;h3 id=&quot;visual-studio-code&quot;&gt;Visual Studio Code&lt;/h3&gt;

&lt;p&gt;免费开源且十分流行的跨平台代码编辑器，除了代码编辑功能以外，安装插件后还能进行调试，目前已更新到版本v1.3.2. 相比于Atom、Sublime等其他代码编辑器，它拥有最多的扩展插件，最新数据表明它排在所有商业和非商业IDE中位居第&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;6&lt;/code&gt;位。还提供代码实时分享的协作开发(Live share)功能。
此外，微软官方还开源了很多vs插件的代码: &lt;a href=&quot;https://opensource.microsoft.com/?sort=Stars&amp;amp;keyword=vscode&amp;amp;tag=&quot;&gt;https://opensource.microsoft.com/?sort=Stars&amp;amp;keyword=vscode&amp;amp;tag=&lt;/a&gt;，除了列表里的第一个，其他都是，特别是&lt;a href=&quot;https://github.com/Microsoft/vscode-go&quot;&gt;Microsoft/vscode-go&lt;/a&gt;最受欢迎，源码值得学习.
&lt;img src=&quot;https://img2018.cnblogs.com/blog/436938/201903/436938-20190330192028158-1757180661.png&quot; alt=&quot;vs-code&quot; /&gt;
中文官网: &lt;a href=&quot;https://azure.microsoft.com/zh-cn/products/visual-studio-code/&quot;&gt;https://azure.microsoft.com/zh-cn/products/visual-studio-code/&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;github地址: https://github.com/Microsoft/vscode&lt;/p&gt;

&lt;h3 id=&quot;typescript&quot;&gt;TypeScript&lt;/h3&gt;

&lt;p&gt;TypeScript是一种由微软开发的自由和开源的编程语言。它是JavaScript的一个严格超集，并添加了可选的静态类型和基于类的面向对象编程。C#的首席架构师以及Delphi和Turbo Pascal的创始人安德斯·海尔斯伯格参与了TypeScript的开发。&lt;/p&gt;

&lt;p&gt;TypeScript设计目标是开发大型应用，然后转译成JavaScript。由于TypeScript是JavaScript的严格超集，任何现有的JavaScript程序都是合法的TypeScript程序。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/436938/201903/436938-20190330192320599-1248672692.png&quot; alt=&quot;Typescript-TS&quot; /&gt;&lt;/p&gt;

&lt;p&gt;github地址: https://github.com/Microsoft/TypeScript&lt;/p&gt;

&lt;h3 id=&quot;rxjs&quot;&gt;RxJS&lt;/h3&gt;

&lt;p&gt;RxJS是JavaScript的Reactive Extensions，它是使用 Observables 的响应式编程的库，它使编写异步或基于回调的代码更容易。该项目是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Reactive-Extensions/RxJS&lt;/code&gt; 上一版本的重写，具有更好的性能、更好的模块性、更好的可调试调用堆栈，同时保持大部分向后兼容，只有一些破坏性的变更(breaking changes)是为了减少外层的 API 。&lt;/p&gt;

&lt;p&gt;中文官网: &lt;a href=&quot;https://cn.rx.js.org&quot;&gt;https://cn.rx.js.org&lt;/a&gt; .&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/436938/201903/436938-20190330192515734-1776677080.png&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;github地址: &lt;a href=&quot;https://github.com/Reactive-Extensions/RxJS&quot;&gt;Reactive-Extensions/RxJS&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;net-core-基础类库&quot;&gt;.NET Core 基础类库&lt;/h3&gt;

&lt;p&gt;此Repo包含.NET Core的库实现（称为“CoreFX”）。 它包括System.Collections，System.IO，System.Xml和许多其他组件。 相应的.NET Core Runtime存储库（称为“CoreCLR”）包含.NET Core的运行时实现。 它包括RyuJIT，.NET GC和许多其他组件。 特定运行时的库代码（System.Private.CoreLib）位于Core CLR Repo中。 它需要与运行时一起构建和版本化。 CoreFX的其余部分与运行时实现无关，可以在任何兼容的.NET运行时（例如CoreRT）上运行。
&lt;img src=&quot;https://img2018.cnblogs.com/blog/436938/201903/436938-20190330192810083-1926102133.png&quot; alt=&quot;.net-coreFx&quot; /&gt;&lt;/p&gt;

&lt;p&gt;github地址: https://github.com/dotnet/corefx&lt;/p&gt;

&lt;h3 id=&quot;cntk&quot;&gt;CNTK&lt;/h3&gt;

&lt;p&gt;Microsoft Cognitive Toolkit（CNTK），一个开源的深度学习工具包&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/436938/201903/436938-20190330203509579-77233727.png&quot; alt=&quot;cntk&quot; /&gt;&lt;/p&gt;

&lt;p&gt;github地址:  &lt;a href=&quot;https://github.com/Microsoft/CNTK&quot;&gt;Microsoft/CNTK&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;microsoft-calculator&quot;&gt;Microsoft calculator&lt;/h3&gt;

&lt;p&gt;Windows计算器：Windows自带的一个简单但功能强大的计算器 (Win10上的UWP计算器)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/436938/201903/436938-20190330192936640-1128230107.png&quot; alt=&quot;Calculator Screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;github地址: &lt;a href=&quot;https://github.com/Microsoft/calculator&quot;&gt;Microsoft/calculator&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;monaco-editor&quot;&gt;Monaco editor&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;Monaco editor&lt;/strong&gt;：基于浏览器的代码编辑器，Visual Studio就是以Monaco editor为基础开发而成的，本人上一篇文章XAML Studio也是以之为基础做成的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/436938/201903/436938-20190330193017878-233129264.png&quot; alt=&quot;Monaco-editor&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在线试用:
&lt;a href=&quot;https://microsoft.github.io/monaco-editor/playground.html&quot;&gt;https://microsoft.github.io/monaco-editor/playground.html&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;github地址: &lt;a href=&quot;https://github.com/Microsoft/monaco-editor&quot;&gt;Microsoft/monaco-editor&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;ms-dos&quot;&gt;MS-DOS&lt;/h3&gt;

&lt;p&gt;MS-DOS 1.25和2.0的原始资源，供参考。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/436938/201903/436938-20190330193034987-1030175783.png&quot; alt=&quot;ms-dos&quot; /&gt;&lt;/p&gt;

&lt;p&gt;github地址: &lt;a href=&quot;https://github.com/Microsoft/MS-DOS&quot;&gt;Microsoft/MS-DOS&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;redis-windows版&quot;&gt;Redis windows版&lt;/h3&gt;

&lt;p&gt;由于Redis官方没推出Windows版，微软自己基于Redis官方的Linux版的部分特性做了一个Windows版。
Redis windows版是一个内存数据库，可以在磁盘上保留。 数据模型是键值，但支持许多不同类型的值：字符串，列表，集，排序集，哈希值.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/436938/201903/436938-20190330193120892-1062728683.png&quot; alt=&quot;Redis Cache On Windows&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/436938/201903/436938-20190330193159887-1045326438.png&quot; alt=&quot;Redis windows&quot; /&gt;&lt;/p&gt;

&lt;p&gt;它原来的repo地址是 &lt;a href=&quot;https://github.com/MSOpenTech/redis&quot;&gt;MSOpenTech&lt;/a&gt; ，后来 &lt;a href=&quot;https://github.com/orgs/MSOpenTech&quot;&gt;https://github.com/orgs/MSOpenTech&lt;/a&gt;下的项目全迁移到了&lt;a href=&quot;https://github.com/MicrosoftArchive&quot;&gt;https://github.com/MicrosoftArchive&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;故最新github地址: &lt;a href=&quot;https://github.com/MicrosoftArchive/redis&quot;&gt;MicrosoftArchive/redis&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;net-core-clr-公共语言运行时&quot;&gt;.NET Core CLR (公共语言运行时)&lt;/h3&gt;

&lt;p&gt;CoreCLR，是 .NET Core 的执行引擎，包括 RynJIT、.NET GC、原生 interop 和其他 .NET 运行时组件。当你在 .NET Core 上运行 ASP.NET 5 应用时，CoreCLR 用来执行你的代码，这还需要依赖于 CoreFX/BCL 库。
微软称在开源和跨平台 .NET 运行时环境这项工作上将会有几个额外的里程碑。
&lt;img src=&quot;https://img2018.cnblogs.com/blog/436938/201903/436938-20190330193604903-2018667119.png&quot; alt=&quot;.NET Core CLR-enjoy233-Bravo Yeung&quot; /&gt;&lt;/p&gt;

&lt;p&gt;github地址: https://github.com/dotnet/coreclr&lt;/p&gt;

&lt;h3 id=&quot;aspnet-core&quot;&gt;ASP.NET Core&lt;/h3&gt;

&lt;p&gt;ASP.NET Core 是新一代的 ASP.NET，早期称为 ASP.NET vNext，并且在推出初期命名为 ASP.NET 5，但随着 .NET Core 的成熟，以及 ASP.NET 5 的命名会使得外界将它视为 ASP.NET 的升级版，但它其实是新一代从头开始打造的 ASP.NET 核心功能，因此微软宣布将它改为与 .NET Core 同步的名称，即 ASP.NET Core。
ASP.NET Core 可运行于 Windows 平台以及非 Windows 平台，如 Mac OSX 以及 Ubuntu Linux 操作系统，是 Microsoft 第一个具有跨平台能力的 Web 开发框架。
微软在一开始开发时就将 ASP.NET Core 开源，因此它也是开源项目的一员，由 .NET 基金会 (.NET Foundation) 所管理。
&lt;img src=&quot;https://img2018.cnblogs.com/blog/436938/201903/436938-20190330193334132-1586429300.png&quot; alt=&quot;ASP.NET Core&quot; /&gt;&lt;/p&gt;

&lt;p&gt;github地址: https://github.com/aspnet/AspNetCore&lt;/p&gt;

&lt;h3 id=&quot;entity-framework-core&quot;&gt;Entity Framework Core&lt;/h3&gt;

&lt;p&gt;Entity Framework Core 是微软新一代的对象关系对应 (ORM) 框架，以 .NET Core 实现，不过它是归属于 ASP.NET Core 项目的一部分，在 ASP.NET Core 开始开发时就被列入标准功能，与现行的 Entity Framework 一样，是微软官方建议使用的数据访问功能，但 .NET Core 成功移植 ADO.NET 基类库 System.Data 之后，开发人员仍能使用 ADO.NET 作为数据访问的解决方案。&lt;/p&gt;

&lt;p&gt;github地址: https://github.com/aspnet/EntityFrameworkCore&lt;/p&gt;

&lt;h3 id=&quot;powershell&quot;&gt;PowerShell&lt;/h3&gt;

&lt;p&gt;PowerShell（包括Windows PowerShell and PowerShell Core）是微软公司开发的任务自动化和配置管理框架，由.NET Framework和.NET Core是构建的命令行界面壳层相关脚本语言组成，最初仅Windows组件，后于2016年8月18日开源并跨平台支持。
在PowerShell中，管理任务通常由cmdlets（发音为command-lets）执行，这是执行特定操作的专用.NET类。可以将cmdlet集合至脚本、可执行文件（一般是独立应用程序）中，或通过常规.NET类（或WMI / COM对象）实例化。通过访问不同数据存储中的数据由PowerShell运行，如资源管理器或注册表。&lt;/p&gt;

&lt;p&gt;PowerShell Core可很好地与现有工具配合使用, 并针对处理结构化数据 (例如 json、csv、xml 等)、REST API 和对象模型进行了优化。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/436938/201903/436938-20190330193720943-437771760.png&quot; alt=&quot;img-Bravo Yeung-enjoy233&quot; /&gt;&lt;/p&gt;

&lt;p&gt;github地址: https://github.com/PowerShell/PowerShell&lt;/p&gt;

&lt;h2 id=&quot;如何在其中搜索自己需要的项目&quot;&gt;如何在其中搜索自己需要的项目&lt;/h2&gt;

&lt;p&gt;由于主页&lt;a href=&quot;https://opensource.microsoft.com&quot;&gt;https://opensource.microsoft.com&lt;/a&gt;提供了搜索功能，只需在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Search repos...&lt;/code&gt;的地方输入关键字即可。比如我需要搜索&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpf&lt;/code&gt;相关的，在该处输入&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wpf&lt;/code&gt;。
&lt;img src=&quot;https://img2018.cnblogs.com/blog/436938/201903/436938-20190330193816046-377228234.png&quot; alt=&quot;search-Bravo Yeung-enjoy233&quot; /&gt;&lt;/p&gt;

&lt;p&gt;此时发现地址栏的网址已变成
&lt;a href=&quot;https://opensource.microsoft.com/?sort=Awesomeness&amp;amp;keyword=wpf&amp;amp;tag=&quot;&gt;https://opensource.microsoft.com/?sort=Awesomeness&amp;amp;keyword=wpf&amp;amp;tag=&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;搜索结果为:
&lt;img src=&quot;https://img2018.cnblogs.com/blog/436938/201903/436938-20190330193857268-1171573944.png&quot; alt=&quot;search-result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;同上，此处也可切换排序条件，点击&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;← Previous &lt;/code&gt;或&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Next →&lt;/code&gt;来进行翻页。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/436938/201903/436938-20190330192249612-1866737019.png&quot; alt=&quot;sort-by-stars_Bravo Yeung-enjoy233&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;github-邮件订阅&quot;&gt;GitHub-邮件订阅&lt;/h2&gt;

&lt;p&gt;事实上，微软开源项目是使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Github pages&lt;/code&gt;来管理的。根据&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Github pages&lt;/code&gt;的规则，默认设置下&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Github pages&lt;/code&gt;访问页&lt;a href=&quot;http://microsoft.github.io&quot;&gt;http://microsoft.github.io&lt;/a&gt;对应的项目应该为: &lt;a href=&quot;https://github.com/Microsoft/microsoft.github.io&quot;&gt;https://github.com/Microsoft/microsoft.github.io&lt;/a&gt;. 使用&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Github pages&lt;/code&gt;搭建过个人博客的人都应该深知这一点。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/436938/201903/436938-20190330194159138-1727538688.png&quot; alt=&quot;1553940590777-Bravo Yeung-enjoy233&quot; /&gt;&lt;/p&gt;

&lt;p&gt;在&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github&lt;/code&gt;上登录个人账号之后，只需点&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Watching&lt;/code&gt;, 选择”Be notified of all conversions”即可，一旦github上有更新，会在Email中收到通知~&lt;/p&gt;

&lt;h2 id=&quot;rss订阅&quot;&gt;Rss订阅&lt;/h2&gt;

&lt;p&gt;本人使用工具&lt;a href=&quot;https://fivefilters.org/content-only/&quot;&gt;https://fivefilters.org/content-only/&lt;/a&gt;为此网站创建了&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rss&lt;/code&gt;功能，订阅地址为&lt;a href=&quot;http://ftr.fivefilters.org/makefulltextfeed.php?url=https%3A%2F%2Fopensource.microsoft.com%2F&amp;amp;max=10&quot;&gt;http://ftr.fivefilters.org/makefulltextfeed.php?url=https%3A%2F%2Fopensource.microsoft.com%2F&amp;amp;max=10&lt;/a&gt;，或者 &lt;a href=&quot;http://www.feed43.com/8078656626535244.xml&quot;&gt;http://www.feed43.com/8078656626535244.xml&lt;/a&gt;，同时我还创建了一个FeedEx的版本: &lt;a href=&quot;https://feedex.net/feed/www.feed43.com/8078656626535244.xml&quot;&gt;https://feedex.net/feed/www.feed43.com/8078656626535244.xml&lt;/a&gt;，按需取用吧。&lt;/p&gt;

&lt;p&gt;推荐使用&lt;a href=&quot;https://feedly.com&quot;&gt;Feedly&lt;/a&gt;来订阅，&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2018.cnblogs.com/blog/436938/201903/436938-20190330194223001-574473663.png&quot; alt=&quot;Feedly_Usage-Bravo Yeung-enjoy233&quot; /&gt;
这样一来，只要&lt;a href=&quot;https://opensource.microsoft.com&quot;&gt;https://opensource.microsoft.com&lt;/a&gt;的列表里出现新项目，你进&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;feedly&lt;/code&gt;就能看到了~&lt;/p&gt;

&lt;h2 id=&quot;其他-microsoftgithubio上有用的链接&quot;&gt;其他 microsoft.github.io上&lt;strong&gt;有用的链接&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Windows on Github https://microsoft.github.io/windows/&lt;/li&gt;
  &lt;li&gt;TypeScript Types Search https://microsoft.github.io/TypeSearch/&lt;/li&gt;
  &lt;li&gt;Python Tools for Visual Studio https://microsoft.github.io/PTVS/&lt;/li&gt;
  &lt;li&gt;
    &lt;table&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;sqlworkshops&lt;/td&gt;
          &lt;td&gt;SQL Server Workshops https://microsoft.github.io/sqlworkshops/&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;
  &lt;/li&gt;
  &lt;li&gt;Join Microsoft Developer Design https://microsoft.github.io/join-dev-design/&lt;/li&gt;
  &lt;li&gt;Project Ace - Using Native UI http://microsoft.github.io/ace/docs/native-ui/&lt;/li&gt;
  &lt;li&gt;LSP Overview  https://microsoft.github.io/language-server-protocol/overview&lt;/li&gt;
  &lt;li&gt;DAP Overview https://microsoft.github.io/debug-adapter-protocol/overview&lt;/li&gt;
  &lt;li&gt;ONNX.js - Run ONNX models in the browser https://microsoft.github.io/onnxjs-demo/#/&lt;/li&gt;
  &lt;li&gt;Microsoft Days in the Web https://microsoft.github.io/frontend-bootcamp/&lt;/li&gt;
  &lt;li&gt;Project Mu https://microsoft.github.io/mu/&lt;/li&gt;
  &lt;li&gt;PowerBI Custom Visuals https://microsoft.github.io/PowerBI-visuals/docs/overview/&lt;/li&gt;
  &lt;li&gt;PowerBI-JavaScript demo https://microsoft.github.io/PowerBI-JavaScript/demo/v2-demo/index.html&lt;/li&gt;
  &lt;li&gt;Microsoft Technical Case Studies https://microsoft.github.io/techcasestudies/&lt;/li&gt;
  &lt;li&gt;Microsoft Open Source Code of Conduct https://microsoft.github.io/codeofconduct/&lt;/li&gt;
  &lt;li&gt;Embedded Learning Library (ELL) https://microsoft.github.io/ELL/&lt;/li&gt;
  &lt;li&gt;A library for building cross-platform apps - ReactXP https://microsoft.github.io/reactxp/&lt;/li&gt;
  &lt;li&gt;PartsUnlimited https://microsoft.github.io/PartsUnlimited/&lt;/li&gt;
  &lt;li&gt;PartsUnlimitedMRP https://microsoft.github.io/PartsUnlimitedMRP/&lt;/li&gt;
  &lt;li&gt;CodePush https://microsoft.github.io/code-push/&lt;/li&gt;
  &lt;li&gt;Microsoft PROSE SDK https://microsoft.github.io/prose/&lt;/li&gt;
  &lt;li&gt;Create extensions for Visual Studio https://microsoft.github.io/extendvs/&lt;/li&gt;
  &lt;li&gt;DSCEA https://microsoft.github.io/DSCEA/&lt;/li&gt;
  &lt;li&gt;IoT kit built for the cloud https://microsoft.github.io/azure-iot-developer-kit/&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果有问题，欢迎留言交流~&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;作者简介&lt;/strong&gt;：Bravo Yeung，计算机硕士，知乎干货答主(获&lt;strong&gt;81K&lt;/strong&gt; 赞同, &lt;strong&gt;38K&lt;/strong&gt; 感谢, &lt;strong&gt;235K&lt;/strong&gt; 收藏)。曾在国内 Top3互联网视频直播公司工作过，后加入一家外企做软件开发至今。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;如需转载，请加微信 &lt;strong&gt;iMath7&lt;/strong&gt; 申请开白！&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;欢迎在留言区留下你的观点，一起讨论提高。如果今天的文章让你有新的启发，学习能力的提升上有新的认识，欢迎转发分享给更多人。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;欢迎各位读者加入 &lt;strong&gt;.NET技术交流群&lt;/strong&gt;，在公众号后台回复&lt;strong&gt;“加群”&lt;/strong&gt;或者&lt;strong&gt;“学习”&lt;/strong&gt;即可。&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://images.cnblogs.com/cnblogs_com/enjoy233/1389971/o_gzhCard_for_blog.png&quot; alt=&quot;大白技术控 公众号名片&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;文末彩蛋&quot;&gt;文末彩蛋&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;微信后台回复“&lt;strong&gt;asp&lt;/strong&gt;”，给你：一份全网最强的ASP.NET学习路线图。
&lt;br /&gt;
回复“&lt;strong&gt;cs&lt;/strong&gt;”，给你：一整套 C# 和 WPF 学习资源！
&lt;br /&gt;
回复“&lt;strong&gt;core&lt;/strong&gt;”，给你：2019年dotConf大会上发布的.NET core 3.0学习视频！&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Sat, 27 Jun 2020 06:14:09 +0800</pubDate>
        <link>http://localhost:4000/2020/06/27/developer-benefits_github-open-source-projects-of-microsoft/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/06/27/developer-benefits_github-open-source-projects-of-microsoft/</guid>
        
        <category>github</category>
        
        <category>微软</category>
        
        
        <category>[&quot;github&quot;, &quot;\u5FAE\u8F6F&quot;]</category>
        
        <category>[&quot;github&quot;, &quot;\u5FAE\u8F6F&quot;]</category>
        
        <category>github</category>
        
        <category>微软</category>
        
      </item>
    
      <item>
        <title>剑指Offer | 二维数组中的查找</title>
        <description>&lt;p&gt;由 Edison Zhou公众号「恰童鞋骚年」授权发表~&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;img src=&quot;//cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/2020/edison-gzh1.png&quot; alt=&quot;大白技术控geekplayers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;刚刚结束了《&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MzA4NzQzNTg4Ng==&amp;amp;mid=2651731421&amp;amp;idx=1&amp;amp;sn=f97cc4cd59e60f23341c8548c304fdc8&amp;amp;chksm=8bc3eadcbcb463cabb6bb6e8f3bdb01dd1cd2cc6963300bc36843d9aac6bedb1280e3c667c62&amp;amp;scene=21#wechat_redirect&quot;&gt;每天5分钟用C#学习数据结构&lt;/a&gt;》的学习之旅，今天开始我们来用之前学到的数据结构知识来刷《剑指Offer》的一些核心题目（精选了其中30+道题目），希望对你有帮助！本文是第一篇，题目为：二维数组中的查找。&lt;/p&gt;

&lt;p&gt;画外音：后台回复&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;offer&lt;/code&gt;，pdf下载链接。&lt;/p&gt;

&lt;h2 id=&quot;1题目介绍&quot;&gt;1.题目介绍&lt;/h2&gt;

&lt;p&gt;在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。&lt;/p&gt;

&lt;p&gt;例如下面的二维数组就是每行、每列都递增排序。如果在这个数组中查找数字7，则返回true；如果查找数字5，由于数组不含有该数字，则返回false。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/2020/edison-gzh2.png&quot; alt=&quot;大白技术控geekplayers&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;2解题思路&quot;&gt;2.解题思路&lt;/h2&gt;

&lt;p&gt;怎么样，有思路吗？&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/2020/edison-gzh3.png&quot; alt=&quot;大白技术控geekplayers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;首先选取数组中右上角的数字。如果该数字等于要查找的数字，查找过程结束；如果该数字大于要查找的数字，剔除这个数字所在的列；如果该数字小于要查找的数字，剔除这个数字所在的行。也就是说如果要查找的数字不在数组的右上角，则每一次都在数组的查找范围中剔除一行或者一列，这样每一步都可以缩小查找的范围，直到找到要查找的数字，或者查找范围为空。&lt;/p&gt;

&lt;p&gt;例如，我们要在上述的二维数组中查找数字7的步骤如下图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/2020/edison-gzh4.jpg&quot; alt=&quot;大白技术控geekplayers&quot; /&gt;&lt;/p&gt;

&lt;p&gt;　　（矩阵中加阴影背景的区域是下一步查找的范围）&lt;/p&gt;

&lt;h2 id=&quot;3解决问题&quot;&gt;3.解决问题&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;代码实现&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;当然是用我们最熟悉的C#代码来实现一下：&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;c1&quot;&gt;// 二维数组matrix中，每一行都从左到右递增排序，&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// 每一列都从上到下递增排序&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[,]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;bool&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isFind&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 从第一行开始&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 从最后一列开始&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;columns&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// 行：从上到下，列：从右到左&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rows&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;isFind&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;column&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;--;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;row&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;++;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isFind&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在前面的分析中，我们每一次都是选取数组查找范围内的右上角数字。同样，我们也可以选取左下角的数字。但我们不能选择左上角或者右下角。以左上角为例，最初数字1位于初始数组的左上角，由于1小于7，那么7应该位于1的右边或者下边。此时我们既不能从查找范围内剔除1所在的行，也不能剔除1所在的列，这样我们就&lt;strong&gt;无法缩小查找的范围&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&quot;4单元测试&quot;&gt;4.单元测试&lt;/h2&gt;

&lt;p&gt;代码实现之后，我们需要写一定的单元测试来验证我们的代码实现：&lt;/p&gt;

&lt;p&gt;（1）要查找的数字在数组中&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;
&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FindTest1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//  1   2   8   9&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//  2   4   9   12&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//  4   7   10  13&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//  6   8   11  15&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 要查找的数在数组中&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[,]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 可以通过GetLength()方法获取行数和列数&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//Assert.AreEqual(Program.Find(matrix, matrix.GetLength(0), matrix.GetLength(1), 7), true);&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;（2）要查找的数不在数组中&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FindTest2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//  1   2   8   9&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//  2   4   9   12&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//  4   7   10  13&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//  6   8   11  15&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 要查找的数不在数组中&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[,]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;（3）要查找的数是数组中最小的数字&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FindTest3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//  1   2   8   9&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//  2   4   9   12&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//  4   7   10  13&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//  6   8   11  15&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 要查找的数是数组中最小的数字&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[,]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;（4）要查找的数是数组中最大的数字&lt;/p&gt;
&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FindTest4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//  1   2   8   9&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//  2   4   9   12&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//  4   7   10  13&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//  6   8   11  15&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 要查找的数是数组中最大的数字&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[,]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;（5）要查找的数比数组中最小的数字还小&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FindTest5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//  1   2   8   9&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//  2   4   9   12&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//  4   7   10  13&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//  6   8   11  15&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 要查找的数比数组中最小的数字还小&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[,]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;（6）要查找的数比数组中最大的数字还大&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FindTest6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//  1   2   8   9&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//  2   4   9   12&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//  4   7   10  13&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//  6   8   11  15&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 要查找的数比数组中最大的数字还大&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[,]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;12&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;13&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;15&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;（7）鲁棒性测试，输入空指针&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TestMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;FindTest7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 鲁棒性测试，输入空指针&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;AreEqual&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Program&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Find&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;最终单元测试的结果：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/2020/edison-gzh5.png&quot; alt=&quot;大白技术控geekplayers&quot; title=&quot;单元测试&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;5参考资料&quot;&gt;5.参考资料&lt;/h2&gt;

&lt;p&gt;何海涛，《剑指Offer》&lt;/p&gt;

&lt;p&gt;后台回复：&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;offer&lt;/code&gt;，即可获得pdf下载链接哟！&lt;/p&gt;
</description>
        <pubDate>Wed, 17 Jun 2020 15:30:00 +0800</pubDate>
        <link>http://localhost:4000/2020/06/17/aimed-at-offer-search-in-two-dimensional-array/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/06/17/aimed-at-offer-search-in-two-dimensional-array/</guid>
        
        <category>.NET</category>
        
        <category>leetcode</category>
        
        
        <category>[&quot;.NET&quot;, &quot;leetcode&quot;, &quot;\u7B97\u6CD5\u9762\u8BD5&quot;]</category>
        
        <category>[&quot;.NET&quot;, &quot;leetcode&quot;, &quot;\u7B97\u6CD5\u9762\u8BD5&quot;]</category>
        
        <category>.NET</category>
        
        <category>leetcode</category>
        
        <category>算法面试</category>
        
      </item>
    
      <item>
        <title>WPF学习笔记（一） - by 邹溪源</title>
        <description>&lt;p&gt;来源: &lt;a href=&quot;https://www.cnblogs.com/xiyuanMore/p/12520439.html&quot;&gt;WPF学习笔记（一） - by 邹溪源&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;h2 id=&quot;引言&quot;&gt;引言&lt;/h2&gt;

&lt;p&gt;在桌面开发领域，虽然在某些领域，基于electron的跨平台方案能够为我们带来某些便利，但是由于WPF技术能够更好的运用Direct3D带来的性能提升、以及海量Windows操作系统和硬件资源的支持，所以他依然有着得天独厚的优势。&lt;/p&gt;

&lt;p&gt;当然，选用一门技术，依然看公司的基因土壤和综合因素或者老板的心血来潮，例如QT也同样是一门非常不错的跨平台图形界面解决方案。&lt;/p&gt;

&lt;p&gt;目前我们公司在桌面开发领域广泛应用了WPF技术，主要是使用其作为大屏数据可视化相关的UI呈现，包括一些数据展示效果、动画效果等。由于之前我对WPF仅有三周经验，因此在开发和设计相关功能时，一些简单功能还能勉强完成，稍微复杂一点的就有点费时过长了，因此这篇文章主要梳理自己的学习笔记，以便总结学习成果。&lt;/p&gt;

&lt;h2 id=&quot;如何学习wpf技术&quot;&gt;如何学习WPF技术？&lt;/h2&gt;

&lt;p&gt;在Quote上有人提出了这样一个相同的问题，&lt;a href=&quot;https://www.quora.com/How-can-I-learn-WPF-easily&quot;&gt;查看问题&lt;/a&gt;，开发者&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Srikanth Pagadala&lt;/code&gt;如是回答：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;1、以了解基础控件作为学习的起步过程：这些控件包括TextBox,Button,TextBlock及其他的，理解这些控件对外提供的属性，以及如何使用。&lt;/p&gt;

  &lt;p&gt;2、了解和使用布局空间：例如Grid、StackPanel、DockerPanel和其他控件，在这一点上，你需要花费大量的时间。同时你需要学会创建复杂的UI设计。&lt;/p&gt;

  &lt;p&gt;3、了解循环类型的空间，例如ItemControl控件。&lt;/p&gt;

  &lt;p&gt;4、了解关于模板的概念。包括如何定义包含CheckBox的Combox，同时这个控件还包含了一张图片的按钮，以及如何在ItemsControl中使用不同的模板。&lt;/p&gt;

  &lt;p&gt;5、理解数据绑定的运行机制。尝试创建一个MVVM或类似类型的应用程序。&lt;/p&gt;

  &lt;p&gt;6、创建一个典型的控件，探索DependencyProperties（依赖属性）和AttachedProperties（附加属性）。&lt;/p&gt;

  &lt;p&gt;7、创建一个样式资源，理解如何给控件设计样式。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;除此之外，还有其他开发者给出了补充回答：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;1、学习控件的数据绑定过程，在DataGrid上实现数据绑定。&lt;/p&gt;

  &lt;p&gt;2、学习和实现INotifyPropertyChanged类。&lt;a href=&quot;https://msdn.microsoft.com/en-us/library/vstudio/ms743695(v=vs.100).aspx&quot;&gt;查看如何实现&lt;/a&gt;&lt;/p&gt;

  &lt;p&gt;3、学习Observable Collection。该类型的集合广泛使用于数据集合绑定方面，同时也提供了数据改变通知的机制。&lt;/p&gt;

  &lt;p&gt;4、使网格上的列可编辑。用文本控件（用户项目模板）替换列。为每个捕获文本更改事件的列创建一个属性。在文本控件上使用绑定类型。尝试捕获您在后端在网格上所做的更改。&lt;/p&gt;

  &lt;p&gt;5、成功将数据控件中的文本控件与后端属性绑定后，请在同一页面上创建网格的副本。尝试同步这两个网格。例如，您在第一个网格中所做的每个更改都必须在第二个网格中自动更新。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;网站”&lt;a href=&quot;https://www.wpf-tutorial.com/&quot;&gt;https://www.wpf-tutorial.com/&lt;/a&gt;“是一个专门用于学习WPF的网站，通过这个网站，可以快速的入门WPF。&lt;/p&gt;

&lt;p&gt;由于WPF技术已经比较熟悉，所以书籍也比较多，网友推荐来自刘铁猛老师的《深入浅出WPF》这本书，而我通过Kindle则看到了一本比较有意思的书《葵花宝典-WPF自学手册》，这本书写得比较生动，通过故事的形式讲了WPF的许多技术原理，无形中让我对WPF的概念有了许多新的认识。当然，这本书已经有点年头了。&lt;/p&gt;

&lt;h3 id=&quot;wpf的常用控件&quot;&gt;WPF的常用控件&lt;/h3&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;控件类型&lt;/th&gt;
      &lt;th&gt;控件名称&lt;/th&gt;
      &lt;th&gt;控件说明&lt;/th&gt;
      &lt;th&gt;链接地址&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;组件&lt;/td&gt;
      &lt;td&gt;Window&lt;/td&gt;
      &lt;td&gt;窗口&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.window?view=netframework-4.8&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Page&lt;/td&gt;
      &lt;td&gt;页面&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.controls.page?view=netframework-4.8&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;NavigationWindow&lt;/td&gt;
      &lt;td&gt;导航窗口&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.navigation.navigationwindow?view=netframework-4.8&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Frame&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/Frame&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;常规控件&lt;/td&gt;
      &lt;td&gt;Button&lt;/td&gt;
      &lt;td&gt;按钮控件，提供Content作为内容&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/Button&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;TextBox&lt;/td&gt;
      &lt;td&gt;文本框控件，用以输入文本&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/TextBox&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;TextBlock&lt;/td&gt;
      &lt;td&gt;文本块，用以显示文本&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/TextBlock&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Label&lt;/td&gt;
      &lt;td&gt;标签，用以显示文本&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/Label&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;ProgressBar&lt;/td&gt;
      &lt;td&gt;进度条&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/ProgressBar&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;ToggleButton&lt;/td&gt;
      &lt;td&gt;一种可以设置开关三态的按钮&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.controls.primitives.togglebutton?view=netframework-4.8&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Image&lt;/td&gt;
      &lt;td&gt;图像控件，通过Source设置资源路径&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/Image&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;CheckBox&lt;/td&gt;
      &lt;td&gt;勾选框，可以设置是否勾选的三种状态&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/CheckBox&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;RichTextBox&lt;/td&gt;
      &lt;td&gt;富文本框，可以多种格式显示和输入文本&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/RichTextBox&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;TreeView&lt;/td&gt;
      &lt;td&gt;树视图，以树状图的形式显示绑定内容，可以显示是否勾选三态。&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/TreeView&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;WebBrowser&lt;/td&gt;
      &lt;td&gt;浏览器，基于IE内核的浏览器控件&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.controls.webbrowser?view=netframework-4.8&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Calendar&lt;/td&gt;
      &lt;td&gt;日历控件&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.controls.calendar?view=netframework-4.8&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;ComboBox&lt;/td&gt;
      &lt;td&gt;下拉列表&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/ComboBox&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;ContentControl&lt;/td&gt;
      &lt;td&gt;内容控件&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.controls.contentcontrol?view=netframework-4.8&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Expander&lt;/td&gt;
      &lt;td&gt;扩展器，可以显示和折叠面板内的元素&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/Expander&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;GroupBox&lt;/td&gt;
      &lt;td&gt;分组框&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/GroupBox&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;StatusBar&lt;/td&gt;
      &lt;td&gt;状态栏，用于在页面下方显示状态信息。&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/StatusBar&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;DateTimePicker&lt;/td&gt;
      &lt;td&gt;时间控件，可以设置时间状态。&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.forms.datetimepicker?view=netframework-4.8&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;DocumentViewer&lt;/td&gt;
      &lt;td&gt;文档查看器&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/DocumentViewer&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;RadioButton&lt;/td&gt;
      &lt;td&gt;单选按钮&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/RadioButton&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;ScollViewer&lt;/td&gt;
      &lt;td&gt;滚动视图&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/scrollviewer-overview&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;ScollBar&lt;/td&gt;
      &lt;td&gt;滚动条&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.controls.primitives.scrollbar?view=netframework-4.8&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Separator&lt;/td&gt;
      &lt;td&gt;分隔器&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/Separator&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;ToolBar&lt;/td&gt;
      &lt;td&gt;工具条&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/ToolBar&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Slider&lt;/td&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/Slider&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Menu&lt;/td&gt;
      &lt;td&gt;菜单&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/Menu&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;MediaElement&lt;/td&gt;
      &lt;td&gt;多媒体控件&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.controls.mediaelement?view=netframework-4.8&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;PasswordBox&lt;/td&gt;
      &lt;td&gt;密码输入框&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/PasswordBox&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;TabControl&lt;/td&gt;
      &lt;td&gt;选项卡&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/TabControl&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;ToolBarTray&lt;/td&gt;
      &lt;td&gt;工具条&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.controls.toolbartray?view=netframework-4.8&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;WindowsFormsHost&lt;/td&gt;
      &lt;td&gt;用以承载WinForm&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.forms.integration.windowsformshost?view=netframework-4.8&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Border&lt;/td&gt;
      &lt;td&gt;边框&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/Border&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;数据控件&lt;/td&gt;
      &lt;td&gt;ListView&lt;/td&gt;
      &lt;td&gt;列表视图&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/ListView&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;DataGrid&lt;/td&gt;
      &lt;td&gt;数据表&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/datagrid&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;ListBox&lt;/td&gt;
      &lt;td&gt;列表框&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/ListBox&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;布局&lt;/td&gt;
      &lt;td&gt;WrapPanel&lt;/td&gt;
      &lt;td&gt;可变面板&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/WrapPanel&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;StackPanel&lt;/td&gt;
      &lt;td&gt;固定面板&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/StackPanel&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;DockerPanel&lt;/td&gt;
      &lt;td&gt;停靠面板&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.controls.dockpanel?view=netframework-4.8&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Grid&lt;/td&gt;
      &lt;td&gt;表格布局&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/Grid&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;UniformGrid&lt;/td&gt;
      &lt;td&gt;统一分布表格布局&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.controls.primitives.uniformgrid?view=netframework-4.8&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/Label&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
      &lt;td&gt;Canvas&lt;/td&gt;
      &lt;td&gt;画布&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/Canvas&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;图形&lt;/td&gt;
      &lt;td&gt;Point&lt;/td&gt;
      &lt;td&gt;点&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/controls/Border&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Line&lt;/td&gt;
      &lt;td&gt;线&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.shapes.line?view=netframework-4.8&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Path&lt;/td&gt;
      &lt;td&gt;路径&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.shapes.path?view=netframework-4.8&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Polygon&lt;/td&gt;
      &lt;td&gt;多边形&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.shapes.polygon?view=netframework-4.8&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Polyline&lt;/td&gt;
      &lt;td&gt;多段线&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.shapes.polyline?view=netframework-4.8&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Rectangle&lt;/td&gt;
      &lt;td&gt;矩形&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/api/system.drawing.rectangle?view=netframework-4.8&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Shape&lt;/td&gt;
      &lt;td&gt;画笔&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;http://xn--z4qx0el9c32a313hyqhea/&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Rectangle&lt;/td&gt;
      &lt;td&gt;矩形&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/api/system.drawing.rectangle?view=netframework-4.8&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt; &lt;/td&gt;
      &lt;td&gt;Ellipse&lt;/td&gt;
      &lt;td&gt;椭圆&lt;/td&gt;
      &lt;td&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.shapes.ellipse?view=netframework-4.8&quot;&gt;查看示例&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h3 id=&quot;wpf的xaml语法&quot;&gt;WPF的XAML语法&lt;/h3&gt;

&lt;h4 id=&quot;概述&quot;&gt;概述&lt;/h4&gt;

&lt;p&gt;在WPF技术中引入的XAML语法算是该技术的一大特色，也是被学习者视同为学习路径陡峭的”罪魁祸首”。原因是在前端技术飞速发展的今天，HTML的语法体系由于更早的被开发者接受，所以也自然而然更容易成为开发者的首选。&lt;/p&gt;

&lt;p&gt;而XAML是一种脱胎于XML，并吸收了HTML的精华的语法体系，是一种界面描述语言，XML语法本身相对而言较为臃肿的体系，看似成为了他的历史负担，但是其实倒也没那么复杂，通过几个简单的示例，其实就足够掌握这门新的语法体系了。例如，使用这样的语法，完全可以平滑过渡到这样的语法体系。(部分标签其实只是大小写不同）。当然，在XAML中熟练编写样式，确实需要花一点点时间。&lt;/p&gt;

&lt;p&gt;在WPF中，通过XAML定义面向用户交互层的界面，然后编译成baml运行，后端则使用C#或VB.NET这样的CLR语法来实现逻辑交互。&lt;/p&gt;

&lt;h4 id=&quot;xaml的语法定义&quot;&gt;XAML的语法定义&lt;/h4&gt;

&lt;h3 id=&quot;xaml的根元素定义&quot;&gt;XAML的根元素定义&lt;/h3&gt;

&lt;p&gt;根元素定义是定义XAML的命名空间。&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Page&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;xmlns=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;xmlns:x=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;xaml的属性语法&quot;&gt;XAML的属性语法&lt;/h3&gt;

&lt;p&gt;通过xaml定义按钮，并设置文本为 helloworld 。这种写法在官方文档中称为”属性语法”，即直接在XAML中对属性进行设置。&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Background=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Blue&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Foreground=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Red&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello world&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;xaml的属性元素语法&quot;&gt;XAML的属性元素语法&lt;/h3&gt;

&lt;p&gt;通过xaml定义按钮，并设置其背景为蓝色画笔，字体颜色为红色画笔，内容 为helloworld。这种写法在官方文档中称为”属性元素语法”。&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Button&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Button.Background&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;SolidColorBrush&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Blue&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Button.Background&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Button.Foreground&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;SolidColorBrush&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Red&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Button.Foreground&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Button.Content&amp;gt;&lt;/span&gt;
    hello world
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Button.Content&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Button&amp;gt;&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;xaml的集合语法&quot;&gt;XAML的集合语法&lt;/h3&gt;

&lt;p&gt;定义按钮的颜色为红色和蓝色渐变色，内容为helloworld。这种称为”集合语法”。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&amp;lt;LinearGradientBrush&amp;gt;
  &amp;lt;LinearGradientBrush.GradientStops&amp;gt;
    &amp;lt;!-- no explicit new GradientStopCollection, parser knows how to find or create --&amp;gt;
    &amp;lt;GradientStop Offset=&quot;0.0&quot; Color=&quot;Red&quot; /&amp;gt;
    &amp;lt;GradientStop Offset=&quot;1.0&quot; Color=&quot;Blue&quot; /&amp;gt;
  &amp;lt;/LinearGradientBrush.GradientStops&amp;gt;
&amp;lt;/LinearGradientBrush&amp;gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;xaml的样式定义&quot;&gt;XAML的样式定义&lt;/h3&gt;

&lt;h3 id=&quot;通过属性语法来定义按钮的外观&quot;&gt;通过属性语法来定义按钮的外观&lt;/h3&gt;

&lt;p&gt;样式定义使用 标签，然后在中间对样式的内容进行定义。&lt;/p&gt;

&lt;p&gt;例如，以下表示通过XAML语法对 ToggleButton 按钮定义了一个命名为 ToggleLikeButtonStyle 的样式。&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;Style&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;TargetType=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ToggleButton&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x:Key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ToggleLikeButtonStyle&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Margin&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FontWeight&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Black&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Foreground&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Black&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BorderThickness&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;IsThreeState&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;False&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/Setter&amp;gt;&lt;/span&gt;

&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Style&amp;gt;&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;wpf中的模板template&quot;&gt;WPF中的模板Template&lt;/h3&gt;

&lt;p&gt;WPF中的控件可以通过模板 Template 的形式来定义其内容，使得开发者能够通过 XAML 灵活的对控件的外观进行扩展。例如，如下定义了一个 Template，这个控件模板将会对控件（Button）定义填充制定颜色。&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Template&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter.Value&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ControlTemplate&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;Border&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;BorderThickness=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;CornerRadius=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Border.Background&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;LinearGradientBrush&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;EndPoint=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0,1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;StartPoint=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0,0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;GradientStop&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#4696F2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Offset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.5&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/LinearGradientBrush&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Border.Background&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;ContentPresenter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{TemplateBinding ContentControl.Content}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;HorizontalAlignment=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Center&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;VerticalAlignment=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Center&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Border&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ControlTemplate&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Setter.Value&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Setter&amp;gt;&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;xaml中的触发器triggers&quot;&gt;XAML中的触发器Triggers&lt;/h3&gt;

&lt;p&gt;传统的WinForm开发者习惯于通过事件的机制对按钮的外观进行定义，而在WPF中，则可以通过属性的形式对外观进行设置，这使得开发者更能够写出高质量的代码。&lt;/p&gt;

&lt;p&gt;例如，如下代码通过定义触发器，设置控件（控件为 ToggleButton），当控件的勾选状态属性为”IsChecked” 时，其边框填充色为#4696F2颜色。&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;ControlTemplate.Triggers&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Trigger&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;IsChecked&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;True&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Border.Background&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;TargetName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PART_Background&quot;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;&amp;lt;Setter.Value&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;LinearGradientBrush&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;EndPoint=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0,1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;StartPoint=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0,0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;GradientStop&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#4696F2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Offset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.5&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/LinearGradientBrush&amp;gt;&lt;/span&gt;
                                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Setter.Value&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Setter&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Width&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;TargetName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PART_Background&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;60&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/Setter&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;TargetName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;contextPresenter&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;已点赞&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/Setter&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Visibility&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;TargetName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;contextPresenter&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Visible&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/Setter&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Visibility&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;TargetName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;contextImage&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hidden&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Trigger&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ControlTemplate.Triggers&amp;gt;&lt;/span&gt;                        

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;部分完整代码&quot;&gt;部分完整代码&lt;/h3&gt;

&lt;p&gt;在上述事例中，共定义了两个按钮的样式，分别是:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;FlatButtonStyle，这是个圆角按钮。&lt;/strong&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/191302/202003/191302-20200318212756317-118994661.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Style&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;TargetType=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Button&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x:Key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FlatButtonStyle&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Margin&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FontWeight&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Black&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Foreground&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Black&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BorderThickness&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Template&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter.Value&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ControlTemplate&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;Border&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;BorderThickness=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;CornerRadius=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Border.Background&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;LinearGradientBrush&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;EndPoint=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0,1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;StartPoint=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0,0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;GradientStop&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#4696F2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Offset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.5&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/LinearGradientBrush&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Border.Background&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;ContentPresenter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{TemplateBinding ContentControl.Content}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;HorizontalAlignment=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Center&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;VerticalAlignment=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Center&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Border&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ControlTemplate&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Setter.Value&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Setter&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Style&amp;gt;&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;ToggleLikeButtonStyle，这是一个点赞按钮。&lt;/strong&gt; &lt;img src=&quot;https://img2020.cnblogs.com/blog/191302/202003/191302-20200318212810837-524413026.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Style&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;TargetType=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ToggleButton&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x:Key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ToggleLikeButtonStyle&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Margin&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FontWeight&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Black&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Foreground&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Black&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BorderThickness&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;IsThreeState&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;False&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/Setter&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Template&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter.Value&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ControlTemplate&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;TargetType=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{x:Type ToggleButton}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;Border&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;BorderThickness=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;CornerRadius=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PART_Background&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Border.Background&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;LinearGradientBrush&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;EndPoint=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0,1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;StartPoint=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0,0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;GradientStop&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#525252&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Offset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.5&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/LinearGradientBrush&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Border.Background&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Grid&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;ContentPresenter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x:Name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;contextPresenter&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{TemplateBinding ContentControl.Content}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;HorizontalAlignment=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Center&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;VerticalAlignment=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Center&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;Image&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x:Name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;contextImage&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;24&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;24&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Source=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;assests/thumbs-up-outline.png&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;HorizontalAlignment=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Center&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;VerticalAlignment=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Center&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Grid&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Border&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;ControlTemplate.Triggers&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Trigger&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;IsChecked&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;True&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Border.Background&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;TargetName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PART_Background&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter.Value&amp;gt;&lt;/span&gt;
                                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;LinearGradientBrush&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;EndPoint=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0,1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;StartPoint=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0,0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;GradientStop&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#4696F2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Offset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.5&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/LinearGradientBrush&amp;gt;&lt;/span&gt;
                                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Setter.Value&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Setter&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Width&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;TargetName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PART_Background&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;60&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/Setter&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Content&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;na&quot;&gt;TargetName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;contextPresenter&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;已点赞&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/Setter&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Visibility&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;na&quot;&gt;TargetName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;contextPresenter&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Visible&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/Setter&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Visibility&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;TargetName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;contextImage&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hidden&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Trigger&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Trigger&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;IsChecked&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;False&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Border.Background&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;TargetName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PART_Background&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter.Value&amp;gt;&lt;/span&gt;
                                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;LinearGradientBrush&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;EndPoint=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0,1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;StartPoint=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0,0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;GradientStop&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#525252&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Offset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.5&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/LinearGradientBrush&amp;gt;&lt;/span&gt;
                                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Setter.Value&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Setter&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Width&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;TargetName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;PART_Background&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;40&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/Setter&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Visibility&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;na&quot;&gt;TargetName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;contextPresenter&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hidden&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/Setter&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Visibility&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;TargetName=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;contextImage&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Visible&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Trigger&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ControlTemplate.Triggers&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ControlTemplate&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Setter.Value&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Setter&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Style&amp;gt;&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;xaml的标记扩展&quot;&gt;XAML的&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/advanced/markup-extensions-and-wpf-xaml&quot;&gt;标记扩展&lt;/a&gt;&lt;/h3&gt;

&lt;p&gt;通过了解WPF的常用控件，我们可以知道自己需要使用的控件有哪些属性，并能使用 XAML 语法对相应的属性进行设置，这种设置方法有别于通过C#代码的形式进行定义的方法，在 XAML中的属性称为 “标记”。标记使用 “{}” 花括号，编译器通过该花括号将语法和XAML语法进行区分。&lt;/p&gt;

&lt;p&gt;例如：&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; HeaderTemplate=&quot;{DynamicResource StretchedHeaderTemplate}&quot;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;标记值的转换与typeconverters&quot;&gt;标记值的转换与TypeConverters&lt;/h3&gt;

&lt;p&gt;在进行标记值转换时，有时候需要使用TypeConverters实现类型转换。例如，在上述示例代码中，可以看到使用了字符串”#525252”来定义颜色，在内部就是实现了从字符串到 Color 类的转换过程。限于篇幅有限，此处就暂时略过。&lt;/p&gt;

&lt;h3 id=&quot;xaml中内置特殊标记扩展&quot;&gt;XAML中内置特殊标记扩展&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;x:Type：特定类型&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;object&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{x:Type prefix:typeNameValue}&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;x:Static：使用静态值。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;object&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{x:Static prefix:typeName.staticMemberName}&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;x:Null：使用空对象定义为属性值。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;object&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{x:Null}&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;x:Array：使用数组对象。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;x:Array&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Type=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;typeName&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  arrayContents
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/x:Array&amp;gt;&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;常见的标记扩展&quot;&gt;常见的标记扩展&lt;/h3&gt;

&lt;ol&gt;
  &lt;li&gt;StaticResource：通过替换已定义资源的值来为属性提供内容，该资源标记在XAML加载时自动执行。静态资源无法通过在XAML语法体系中对其引用关系进行前向引用，意味着无法通过多层级关系定义可复用的样式资源，如果需要这样做，则需要使用DynamicResource。&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;object&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{StaticResource key}&quot;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;DynamicResource：在运行时为资源提供内容。&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&amp;lt;object property=&quot;{DynamicResource key}&quot; .../&amp;gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;Binding：在运行时为使用数据上下文为数据提供内容。&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&amp;lt;object property=&quot;{Binding}&quot; .../&amp;gt;
-or-
&amp;lt;object property=&quot;{Binding  bindProp1=value1[, bindPropN=valueN]*}&quot; ...
/&amp;gt;
-or-
&amp;lt;object property=&quot;{Binding path}&quot; .../&amp;gt;
-or
&amp;lt;object property=&quot;{Binding path[, bindPropN=valueN]*}&quot; .../&amp;gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;RelativeSource：提供了可在运行时对象树中导航几个可能的关系的 &lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.data.binding&quot;&gt;Binding&lt;/a&gt; 的源信息。&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&amp;lt;Binding RelativeSource=&quot;{RelativeSource modeEnumValue}&quot; .../&amp;gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;TemplateBinding：使控件模板能够使用模板化属性的值，这些属性来自于将使用该模板的类的对象模型定义属性。&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&amp;lt;object property=&quot;{TemplateBinding sourceProperty}&quot; .../&amp;gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;ColorConvertedBitmap：提供一种方法，用于指定没有嵌入的配置文件的位图源。 颜色上下文/配置文件由 URI 指定，与映像源 URI 相同。&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&amp;lt;object property=&quot;{ColorConvertedBitmap imageSource sourceIIC destinationIIC}&quot; .../&amp;gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ol&gt;
  &lt;li&gt;ComponentResourceKey和TemplateResourceKey：&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&amp;lt;object x:Key=&quot;{ComponentResourceKey {x:Type targetTypeName}, targetID}&quot; .../&amp;gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;xaml资源复用&quot;&gt;XAML资源复用&lt;/h4&gt;

&lt;p&gt;在开发过程中，我们可以直接在按钮上进行按钮模板的定义，例如下面的代码。&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;40&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;40&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{DynamicResource CubeImageButtonStyle}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Click=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Button_Click&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;点赞&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Button.Background&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;ImageBrush&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ImageSource=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/assests/favicon.png&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Stretch=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Fill&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Button.Background&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Button&amp;gt;&lt;/span&gt;
                          &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Template&quot;&lt;/span&gt;
                &lt;span class=&quot;err&quot;&gt;&amp;lt;Setter.Value&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;ControlTemplate&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;Border&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;BorderThickness=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;CornerRadius=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;3&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Border.Background&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;LinearGradientBrush&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;EndPoint=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0,1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;StartPoint=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0,0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;GradientStop&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Color=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#4696F2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Offset=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.5&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/LinearGradientBrush&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Border.Background&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;ContentPresenter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{TemplateBinding ContentControl.Content}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;HorizontalAlignment=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Center&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;VerticalAlignment=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Center&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Border&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ControlTemplate&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Setter.Value&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Setter&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Style&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Window.Resources&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;Grid&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Grid.Column=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Grid.Row=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Style=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{StaticResource FlatButtonStyle}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;HorizontalAlignment=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Center&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;VerticalAlignment=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Top&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;48&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;16&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;FontSize=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Background=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;#4696F2&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Content=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;获取&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/Button&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Grid&amp;gt;&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;这样的代码在界面比较简单时，还无所谓，但是随着控件的样式越来越复杂，可能会成为一团乱麻，这对于追求优雅代码的我们来说，可能是难以忍受的，所以往往会使用资源引用来完成。&lt;/p&gt;

&lt;h3 id=&quot;staticresource&quot;&gt;StaticResource&lt;/h3&gt;

&lt;p&gt;例如，我们可以在当前页面代码中定义对应的样式，这种样式可以使用 StaticResource 的形式引入。但是这样的引用形式，没有对象图的访问权限，意味着无法访问资源依赖的其他资源。&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;Window.Resources&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;Style&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;TargetType=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Button&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x:Key=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FlatButtonStyle&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt; 
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Margin&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;4&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;FontWeight&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Black&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Foreground&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Black&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;        
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;BorderThickness&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Window.Resources&amp;gt;&lt;/span&gt;         

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;dynamicresource&quot;&gt;DynamicResource&lt;/h3&gt;

&lt;p&gt;将上述代码中的{StaticResource FlatButtonStyle} 改成{StaticResource FlatButtonStyle}则会在运行时加载样式，并可以访问相应的对象图。&lt;/p&gt;

&lt;p&gt;当然，这样的更改意义不大，如果该FlatButtonStyle引用了其他样式或元素，会发生作用。&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&amp;lt;Grid
&amp;lt;Button Grid.Column=&quot;0&quot; Grid.Row=&quot;1&quot; Style=&quot;{StaticResource FlatButtonStyle}&quot; HorizontalAlignment=&quot;Center&quot; VerticalAlignment=&quot;Top&quot; Width=&quot;48&quot; Height=&quot;16&quot; FontSize=&quot;10&quot; Background=&quot;#4696F2&quot; Content=&quot;获取&quot;&amp;gt;&amp;lt;/Button&amp;gt;
 &amp;lt;/Grid&amp;gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;注意事项&quot;&gt;注意事项&lt;/h2&gt;

&lt;p&gt;1、由于XAML语法脱胎于XML语法，而XML语法中本身对某些输入字符，如”&amp;lt;&amp;gt;”存在限制，所以在XAML中也会出现这类问题，并会被Visual Studio检测出错误而无法编译，需要使用UTF-8编码进行转换。&lt;/p&gt;

&lt;h3 id=&quot;用户控件和自定义控件&quot;&gt;用户控件和自定义控件&lt;/h3&gt;

&lt;h4 id=&quot;用户控件&quot;&gt;用户控件&lt;/h4&gt;

&lt;p&gt;而用户控件，使用于控件组合的场景。&lt;/p&gt;

&lt;h4 id=&quot;自定义控件&quot;&gt;自定义控件&lt;/h4&gt;

&lt;p&gt;在笔者进行开发时，总是思考究竟是使用用户控件，还是自定义控件，后来在阅读《葵花宝典-WPF自学手册》这本书中，终于得以大彻大悟。&lt;/p&gt;

&lt;p&gt;作者指出：”不要被控件的外观所欺骗，要考虑其内在本质”。即思考控件的基本特征，首先想到该控件的行为与原有控件的行为是否相似，如果能够找到，则修改原有控件，而不是定义一个控件。尤其是在XAML语法中，能够通过Content 模型和模板、附加属性的运用，使得自定义控件的用途得到了进一步缩减，只有当实在万不得已时，在定义自定义控件。&lt;/p&gt;

&lt;p&gt;作者给出了使用自定义控件的分析思路：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img2020.cnblogs.com/blog/191302/202003/191302-20200318212827625-1658133466.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;例如，在示例代码**ToggleLikeButtonStyle **中，我实现了一个点赞和取消点赞的状态，则使用了ToggleButton来完成，就没必要使用 Button 扩展出一个是否点赞的状态了。&lt;/p&gt;

&lt;p&gt;而如果我们需要实现的功能有这么复杂，那大概使用传统的控件就无法实现，就得使用自定义控件了。（&lt;a href=&quot;https://github.com/caomfan/WpfDemo.git&quot;&gt;点击查看示例代码&lt;/a&gt;）&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;//cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/public/zxy-wpf-self-define-control.png&quot; alt=&quot;图片&quot; /&gt;&lt;/p&gt;

&lt;p&gt;作者定义了自定义控件 ButtonEx，并实现了依赖属性 ButtonType，见【依赖属性】，并定义了不同类型的样式特征。&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;Trigger&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ButtonType&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Icon&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Cursor&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hand&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Template&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter.Value&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;ControlTemplate&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;TargetType=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{x:Type controls:ButtonEx}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;Border&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{TemplateBinding Width}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{TemplateBinding Height}&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;Image&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;x:Name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Img&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;VerticalAlignment=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Center&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;HorizontalAlignment=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Center&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Source=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{TemplateBinding Icon}&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Stretch=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;None&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Border&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;ControlTemplate.Triggers&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;Trigger&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;IsMouseOver&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;True&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Opacity&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.8&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Trigger&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;Trigger&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;IsPressed&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;True&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
                                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Setter&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Property=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Opacity&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;0.9&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
                                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Trigger&amp;gt;&lt;/span&gt;
                            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ControlTemplate.Triggers&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/ControlTemplate&amp;gt;&lt;/span&gt;
                    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Setter.Value&amp;gt;&lt;/span&gt;
                &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Setter&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nt&quot;&gt;&amp;lt;/Trigger&amp;gt;&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;使用时，只需这样设置，即可实现不同类型的按钮外观。&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;controls:ButtonEx&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Icon=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/Images/search.png&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Margin=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;10&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;ButtonType=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Icon&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;属性和事件&quot;&gt;属性和事件&lt;/h3&gt;

&lt;h4 id=&quot;依赖属性&quot;&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/advanced/dependency-properties-overview&quot;&gt;依赖属性&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;依赖属性是为既有WPF控件对象定义自定义属性，以便支持其扩展，例如在上述自定义控件的示例中，就定义了依赖属性 ButtonType，实现了不同类型的按钮外观。&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;public ButtonType ButtonType
        {
            get { return (ButtonType)GetValue(ButtonTypeProperty); }
            set { SetValue(ButtonTypeProperty, value); }
        }

        public static readonly DependencyProperty ButtonTypeProperty =

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;n&quot;&gt;DependencyProperty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Register&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ButtonType&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ButtonType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ButtonEx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;PropertyMetadata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ButtonType&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;附加属性&quot;&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/advanced/attached-properties-overview&quot;&gt;附加属性&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;按照官方的说法就是”附加属性旨在用作可在任何对象上设置的一类全局属性”，例如，DockPanel面板中的子对象，继承了来自于容器对象的附加属性，使得其能够在父对象中实现停靠的功能。&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;DockPanel&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;CheckBox&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;DockPanel.Dock=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Top&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Hello&lt;span class=&quot;nt&quot;&gt;&amp;lt;/CheckBox&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/DockPanel&amp;gt;&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h3 id=&quot;路由事件&quot;&gt;&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/advanced/routed-events-overview&quot;&gt;路由事件&lt;/a&gt;&lt;/h3&gt;

&lt;h4 id=&quot;基本定义&quot;&gt;基本定义&lt;/h4&gt;

&lt;p&gt;假设我们定义了几个这样的控件。&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;Border&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Height=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;50&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;300&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;BorderBrush=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Gray&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;BorderThickness=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;StackPanel&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Background=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;LightGray&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Orientation=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Horizontal&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Button.Click=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CommonClickHandler&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;YesButton&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Auto&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Yes&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Button&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;NoButton&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Auto&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;No&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Button&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;Button&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;CancelButton&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;Width=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Auto&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;Cancel&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Button&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/StackPanel&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/Border&amp;gt;&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;实现了这样的界面&lt;img src=&quot;https://img2020.cnblogs.com/blog/191302/202003/191302-20200318212853603-773449582.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;路由事件就是针对这组元素树中多个元素调用处理程序的事件。当我们点击了按钮Button时，将会触发 Button=&amp;gt;StackPanel=&amp;gt;Border的事件路由，而不是像WinForm应用一样，只能触发最上层的Button的按钮点击事件。&lt;/p&gt;

&lt;h3 id=&quot;路由策略&quot;&gt;路由策略&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;冒泡事件（官方称为浮升，这个翻译有点。。）：调用事件源上的事件处理程序。 路由事件随后会路由到后续的父级元素，直到到达元素树的根。 大多数路由事件都使用浮升路由策略。 浮升路由事件通常用于报告来自不同控件或其他 UI 元素的输入或状态变化。&lt;/li&gt;
  &lt;li&gt;直接： 只有源元素本身才有机会调用处理程序以进行响应。通过使用 &lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.eventsetter&quot;&gt;EventSetter&lt;/a&gt; 和 &lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.eventtrigger&quot;&gt;EventTrigger&lt;/a&gt;使用来设置处理程序。例如，可以使用RoutedEventArgs的&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/api/system.windows.routedeventargs.handled&quot;&gt;Handled&lt;/a&gt;，设置为 true 将事件标记为已处理，将 “停止” 路由用于隧道路由或冒泡路由。&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;MakeButton2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;Button&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;b2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Click&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;RoutedEventHandler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Onb2Click2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Onb2Click2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sender&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;RoutedEventArgs&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//logic to handle the Click event&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;隧道：最初将调用元素树的根处的事件处理程序。 随后，路由事件将朝着路由事件的源节点元素（即引发路由事件的元素）方向，沿路由线路传播到后续的子元素。&lt;/li&gt;
  &lt;li&gt;WPF中约定，隧道路由事件的名称以单词”Preview”开头。 输入事件通常成对出现，一个是浮升事件，另一个是隧道事件。例如，如下图所示，假设按钮2为触发事件的源。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://cdn.jsdelivr.net/gh/by8/by8.github.io@master/images/blog/wpf-event.png&quot; alt=&quot;图片&quot; /&gt;&lt;/p&gt;

&lt;p&gt;1、处理Border根元素的隧道事件PreviewMouseDown&lt;/p&gt;

&lt;p&gt;2、处理StackPanel面板的隧道事件PreviewMouseDown.&lt;/p&gt;

&lt;p&gt;3、处理Button按钮的隧道事件的PreMouseDown。&lt;/p&gt;

&lt;p&gt;4、处理Button按钮的MouseDown事件。&lt;/p&gt;

&lt;p&gt;5、处理StackPanel的MouseDown事件。&lt;/p&gt;

&lt;p&gt;6、处理Border的MouseDown事件。&lt;/p&gt;

&lt;h2 id=&quot;总结&quot;&gt;总结&lt;/h2&gt;

&lt;p&gt;WPF是一个非常庞大的技术体系，以上学习路径仅供开发者进行简单的入门，由于篇幅有限，对于标记扩展还需要进一步理解透彻，以及格式转换、图形绘制、数据绑定、MVVM等内容未能一一描述。&lt;/p&gt;

&lt;p&gt;如果果想要对WPF进一步了解，最好通过系统的学习相关知识，除了前面提到的网站和几本书，最好的入门网站依然是&lt;a href=&quot;https://docs.microsoft.com/zh-cn/dotnet/framework/wpf/&quot;&gt;微软官方文档&lt;/a&gt;。&lt;/p&gt;
</description>
        <pubDate>Thu, 19 Mar 2020 05:26:20 +0800</pubDate>
        <link>http://localhost:4000/2020/03/19/wpf-study-note-by-xiyuanmore/</link>
        <guid isPermaLink="true">http://localhost:4000/2020/03/19/wpf-study-note-by-xiyuanmore/</guid>
        
        <category>mfc</category>
        
        <category>windows</category>
        
        
        <category>wpf</category>
        
      </item>
    
      <item>
        <title>LeetCode面试系列 第12天：No.977 - 有序数组的平方</title>
        <description>&lt;p&gt;上一篇 LeetCode 面试题中，我们分析了一道&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;集合&lt;/code&gt;相关的数学题。现在我们再来看一个&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;排序&lt;/code&gt;相关的面试题吧~&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;//cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/public/LeetCode.png&quot; alt=&quot;Leetcode&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今天要给大家分析的面试题是 LeetCode 上第 &lt;strong&gt;977&lt;/strong&gt; 号问题，&lt;/p&gt;

&lt;p&gt;LeetCode - 977. 有序数组的平方&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/squares-of-a-sorted-array/&quot;&gt;https://leetcode-cn.com/problems/squares-of-a-sorted-array/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;题目描述&quot;&gt;题目描述&lt;/h3&gt;

&lt;p&gt;给定一个按非递减顺序排序的整数数组 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;，返回每个数字的平方组成的新数组，要求也按非递减顺序排序。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;输入：[-4,-1,0,3,10]
输出：[0,1,9,16,100]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;输入：[-7,-3,2,3,11]
输出：[4,9,9,49,121]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1 &amp;lt;= A.length &amp;lt;= 10000&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-10000 &amp;lt;= A[i] &amp;lt;= 10000&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; 已按非递减顺序排序。&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;题目难度：简单&lt;/li&gt;
  &lt;li&gt;通过次数：24.5K&lt;/li&gt;
  &lt;li&gt;提交次数：34.7K&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;贡献者：LeetCode&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;相关标签&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;数组&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/tag/array&quot;&gt;https://leetcode-cn.com/tag/array&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;双指针&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/tag/two-pointers&quot;&gt;https://leetcode-cn.com/tag/two-pointers&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;相似题目&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;合并两个有序数组&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/merge-sorted-array&quot;&gt;https://leetcode-cn.com/problems/merge-sorted-array&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;有序转化数组&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/sort-transformed-array&quot;&gt;https://leetcode-cn.com/problems/sort-transformed-array&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;解题思路:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;如果有办法将数组 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt; 中的值按&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;绝对值&lt;/code&gt;进行递减序排序，那最后只需将排序过的数组中的每个数求个平方依次加入到结果 list 中即可。&lt;/p&gt;

&lt;p&gt;恰好 Python 中的 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sorted(array, key = abs)&lt;/code&gt; 可以实现按绝对值排序，所以这个问题就迎刃而解了。&lt;/p&gt;

&lt;p&gt;已&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AC&lt;/code&gt;的代码为:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sortedSquares&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# sort by absolute values
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;elem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行用时: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;268 ms&lt;/code&gt;, 在所有 python3 提交中击败了 ` 87.52 %` 的用户.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.justdopython.com/assets/images/2019/python/leetcode977.jpg&quot; alt=&quot;Leetcode645&quot; /&gt;&lt;/p&gt;

&lt;p&gt;示例代码: &lt;a href=&quot;https://github.com/JustDoPython/leetcode-python/tree/master/leetcode-977&quot;&gt;https://github.com/JustDoPython/leetcode-python/tree/master/leetcode-977&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Nov 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/11/25/python-leetcode977-squares-of-a-sorted-array/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/11/25/python-leetcode977-squares-of-a-sorted-array/</guid>
        
        <category>LeetCode面试题系列</category>
        
        
        <category>Leetcode面试题</category>
        
      </item>
    
      <item>
        <title>LeetCode面试系列 第11天：No.645 - 错误的集合</title>
        <description>&lt;p&gt;上一篇 LeetCode 面试题中，我们分析了一道简单的几何数学题。今天我们来分析一道集合相关的数学题。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;//cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/public/LeetCode.png&quot; alt=&quot;Leetcode&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今天要给大家分析的面试题是 LeetCode 上第 &lt;strong&gt;645&lt;/strong&gt; 号问题，&lt;/p&gt;

&lt;p&gt;LeetCode - 645. 错误的集合&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/set-mismatch/&quot;&gt;https://leetcode-cn.com/problems/set-mismatch/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;题目描述&quot;&gt;题目描述&lt;/h3&gt;

&lt;p&gt;集合 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S&lt;/code&gt; 包含从 1 到 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n&lt;/code&gt;  的整数。不幸的是，因为数据错误，导致集合里面某一个元素复制了成了集合里面的另外一个元素的值，导致集合丢失了一个整数并且有一个元素重复。&lt;/p&gt;

&lt;p&gt;给定一个数组 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nums&lt;/code&gt; 代表了集合 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;S&lt;/code&gt; 发生错误后的结果。你的任务是首先寻找到重复出现的整数，再找到丢失的整数，将它们以数组的形式返回。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;输入: nums = [1,2,2,4]
输出: [2,3]
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;注意:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;给定数组的长度范围是 [2, 10000]。&lt;/li&gt;
  &lt;li&gt;给定的数组是无序的。&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;题目难度：简单&lt;/li&gt;
  &lt;li&gt;通过次数：7.3K&lt;/li&gt;
  &lt;li&gt;提交次数：18.5K&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;贡献者：LeetCode&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;相关标签&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;哈希表
&lt;a href=&quot;https://leetcode-cn.com/tag/hash-table&quot;&gt;https://leetcode-cn.com/tag/hash-table&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;数学
&lt;a href=&quot;https://leetcode-cn.com/tag/math&quot;&gt;https://leetcode-cn.com/tag/math&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;相似题目&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;寻找重复数&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/find-the-duplicate-number&quot;&gt;https://leetcode-cn.com/problems/find-the-duplicate-number&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;解题思路:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;由于给定输入是无序的数组，且每个数的范围是 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;[1, n]&lt;/code&gt; ，排序后便于后续处理。&lt;/p&gt;

&lt;p&gt;如何得到&lt;strong&gt;重复的数&lt;/strong&gt;？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;只需要使用 set 中元素互不相等的特性，得到去除重复后的数组&lt;/li&gt;
  &lt;li&gt;对原数组求和，再对去重后的数组求和，所得两个和的差极为重复的数&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如何得到&lt;strong&gt;缺失的数&lt;/strong&gt;？&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;使用一个对比序列 stdList，放有: 1, 2 … n 等元素 (从 1 到 n)&lt;/li&gt;
  &lt;li&gt;将原数组转为 set，再将对比序列转为 set。两个 set 的差集中的元素只有一个，取出就是缺失的数。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后将 &lt;strong&gt;重复的数 **和 **缺失的数&lt;/strong&gt; 一起放进 list 中即可。&lt;/p&gt;

&lt;p&gt;已&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;AC&lt;/code&gt;的代码为:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findErrorNums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;stdList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# len(nums) = n
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;repeatedNum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;     
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repeatedNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;missingNum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;  &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stdList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nums&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;missingNum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;执行用时: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;276 ms&lt;/code&gt;, 在所有 python3 提交中击败了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;60.58 %&lt;/code&gt; 的用户.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.justdopython.com/assets/images/2019/python/leetcode645.jpg&quot; alt=&quot;Leetcode645&quot; /&gt;&lt;/p&gt;

&lt;p&gt;示例代码: &lt;a href=&quot;https://github.com/JustDoPython/leetcode-python/tree/master/leetcode-645&quot;&gt;https://github.com/JustDoPython/leetcode-python/tree/master/leetcode-645&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Nov 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/11/25/python-leetcode645-set-mismatch/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/11/25/python-leetcode645-set-mismatch/</guid>
        
        <category>LeetCode面试题系列</category>
        
        
        <category>Leetcode面试题</category>
        
      </item>
    
      <item>
        <title>LeetCode面试系列 第10天：No.976 - 三角形的最大周长</title>
        <description>&lt;p&gt;上一篇 LeetCode 面试题中，我们分析了一道字符串的算法题 - &lt;strong&gt;反转字符串中的元音字母&lt;/strong&gt;，今天我们来分析一道简单的几何题吧。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;//cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/public/LeetCode.png&quot; alt=&quot;Leetcode&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今天要给大家分析的面试题是 LeetCode 上第 &lt;strong&gt;976&lt;/strong&gt; 号问题，&lt;/p&gt;

&lt;p&gt;LeetCode - 976. 三角形的最大周长&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/classic/problems/largest-perimeter-triangle/&quot;&gt;https://leetcode-cn.com/classic/problems/largest-perimeter-triangle/&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;题目描述&quot;&gt;题目描述&lt;/h3&gt;

&lt;p&gt;给定由一些正数（代表长度）组成的数组 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;A&lt;/code&gt;，返回由其中三个长度组成的、&lt;strong&gt;面积不为零&lt;/strong&gt;的三角形的最大周长。&lt;/p&gt;

&lt;p&gt;如果不能形成任何面积不为零的三角形，返回 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;0&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示例 1：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;输入：[2,1,2]
输出：5
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;示例 2：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;输入：[1,2,1]
输出：0
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;示例 3：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;输入：[3,2,3,4]
输出：10
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;示例 4：&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;输入：[3,6,2,3]
输出：8
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;3 &amp;lt;= A.length &amp;lt;= 10000&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1 &amp;lt;= A[i] &amp;lt;= 10^6&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;题目难度：&lt;strong&gt;简单&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;通过次数：8.8K&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;提交次数：16.1K&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;贡献者：LeetCode&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;相关标签&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;排序&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/tag/sort&quot;&gt;https://leetcode-cn.com/tag/sort&lt;/a&gt;&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;数学&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/tag/math&quot;&gt;https://leetcode-cn.com/tag/math&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;相似题目&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;最大三角形面积&lt;/li&gt;
    &lt;/ul&gt;
    &lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/largest-triangle-area&quot;&gt;https://leetcode-cn.com/problems/largest-triangle-area&lt;/a&gt;  难度: &lt;strong&gt;简单&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;解题思路:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;我们知道，平面中构成三角形的充分必要条件是 &lt;strong&gt;3条边中任意两边之和大于第三边&lt;/strong&gt;(3次比较)，也即 &lt;strong&gt;较短的两边之和大于最长边即可&lt;/strong&gt;(有序情形下只需1次比较)。而要求三角形的最大边长，也就是使得&lt;strong&gt;三边之长最大&lt;/strong&gt;，当然是取最长的3个边长了。于是求解此题的具体步骤如下:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;将数组 A 中的各边长度按从大到小排序&lt;/li&gt;
  &lt;li&gt;遍历排过序的数组中的数，取出相邻的 3 个边长，当第一次满足&lt;strong&gt;较短的两边之和大于最长边&lt;/strong&gt;时，则对这3边求和返回即可。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;临界情形: 输入的边数不到3个，直接 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;return 0&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;已 AC 代码:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;   &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;largestPerimeter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# Can build a triangle
&lt;/span&gt;                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;       
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;运行结果:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;执行用时: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;256 ms&lt;/code&gt;, 在所有 python3 提交中击败了 ` 91.91 %` 的用户.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.justdopython.com/assets/images/2019/python/leetcode976-result.png&quot; alt=&quot;leetcode976-result&quot; /&gt;&lt;/p&gt;

&lt;p&gt;示例代码: &lt;a href=&quot;https://github.com/JustDoPython/leetcode-python/tree/master/leetcode-976&quot;&gt;https://github.com/JustDoPython/leetcode-python/tree/master/leetcode-976&lt;/a&gt; .&lt;/p&gt;
</description>
        <pubDate>Wed, 20 Nov 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/11/20/leetcode976-largest-perimeter-triangle/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/11/20/leetcode976-largest-perimeter-triangle/</guid>
        
        <category>LeetCode面试题系列</category>
        
        
        <category>Leetcode面试题</category>
        
      </item>
    
      <item>
        <title>LeetCode面试系列 第9天：No.345 - 反转字符串中的元音字母</title>
        <description>&lt;p&gt;上一篇 LeetCode 面试题中，我们分析了一道相对轻松的字符串面试题 - &lt;strong&gt;最后一个单词的长度&lt;/strong&gt;。今天，我们接着来看另一道字符串的算法题吧。&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;&lt;img src=&quot;//cdn.jsdelivr.net/gh/yanglr/yanglr.github.io/assets/images/public/LeetCode.png&quot; alt=&quot;Leetcode&quot; /&gt;&lt;/p&gt;

&lt;p&gt;今天要给大家分析的面试题是 LeetCode 上第 &lt;strong&gt;345&lt;/strong&gt; 号问题，&lt;/p&gt;

&lt;p&gt;LeetCode - 345. 反转字符串中的元音字母&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/reverse-vowels-of-a-string&quot;&gt;https://leetcode-cn.com/problems/reverse-vowels-of-a-string&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;题目描述&quot;&gt;题目描述&lt;/h3&gt;

&lt;p&gt;编写一个函数，以字符串作为输入，反转该字符串中的元音字母。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;示例 1:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;输入: &quot;hello&quot;
输出: &quot;holle&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;示例 2:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;输入: &quot;leetcode&quot;
输出: &quot;leotcede&quot;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;说明:&lt;/strong&gt;
元音字母不包含字母”y”。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;题目难度：&lt;strong&gt;简单&lt;/strong&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;通过次数：17.9K&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;提交次数：37.2K&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;贡献者：LeetCode&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;相关标签&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;双指针&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/tag/two-pointers&quot;&gt;https://leetcode-cn.com/tag/two-pointers&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;字符串&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/tag/string&quot;&gt;https://leetcode-cn.com/tag/string&lt;/a&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;相似题目&lt;/p&gt;

    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;反转字符串&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/reverse-string&quot;&gt;https://leetcode-cn.com/problems/reverse-string&lt;/a&gt;  难度: &lt;strong&gt;简单&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;删去字符串中的元音&lt;/p&gt;

        &lt;p&gt;&lt;a href=&quot;https://leetcode-cn.com/problems/remove-vowels-from-a-string&quot;&gt;https://leetcode-cn.com/problems/remove-vowels-from-a-string&lt;/a&gt;  难度: &lt;strong&gt;简单&lt;/strong&gt;&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;解题思路:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;本题的意思很简单，就是给定一个只含有英文字母的字符串，将其中的元音字母在元音字母原有的位置上进行位置反转，而非元音字母的位置保持不变。&lt;/p&gt;

&lt;p&gt;需要注意的一点是：元音字母应把 a, e, i, o, u 的小写和大写都考虑在内。&lt;/p&gt;

&lt;p&gt;具体的操作如下:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;将原字符串遍历一次，取出其中的元音字母放进一个 list (比如，变量名用 vList) 中&lt;/li&gt;
  &lt;li&gt;调用函数 reverse() 将 vList 进行反转，得到反转后的 vList&lt;/li&gt;
  &lt;li&gt;重新遍历原字符串，遇到非元音字母直接输出；遇到元音字母，则从已反转的 vList 中取出需要的元音字母。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;已 AC 代码:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;table class=&quot;rouge-table&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;rouge-gutter gl&quot;&gt;&lt;pre class=&quot;lineno&quot;&gt;1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;rouge-code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Solution&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;reverseVowels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vowels&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'E'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'I'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'O'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'U'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'a'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'e'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'i'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'o'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'u'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;vList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
                
        &lt;span class=&quot;n&quot;&gt;vCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;  
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vowels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;vList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;res_str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;        
        &lt;span class=&quot;n&quot;&gt;vList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;vOutCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vowels&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;res_str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;                
                &lt;span class=&quot;n&quot;&gt;res_str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vOutCount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;vOutCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;res_str&lt;/span&gt;
&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;运行结果:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;执行用时: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;84 ms&lt;/code&gt;, 在所有 python3 提交中击败了 &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;48.79%&lt;/code&gt; 的用户.&lt;/p&gt;

&lt;p&gt;示例代码: &lt;a href=&quot;https://github.com/JustDoPython/leetcode-python/tree/master/leetcode-345&quot;&gt;https://github.com/JustDoPython/leetcode-python/tree/master/leetcode-345&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://www.justdopython.com/assets/images/2019/python/leetcode345.png&quot; alt=&quot;Leetcode&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 13 Nov 2019 00:00:00 +0800</pubDate>
        <link>http://localhost:4000/2019/11/13/leetcode345-reverse-vowels-of-a-string/</link>
        <guid isPermaLink="true">http://localhost:4000/2019/11/13/leetcode345-reverse-vowels-of-a-string/</guid>
        
        <category>LeetCode面试题系列</category>
        
        
        <category>Leetcode面试题</category>
        
      </item>
    
  </channel>
</rss>
